; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\sccb.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\sccb.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\ST\STM32F4xx\Include -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSER_MSG_ENB -DWRITEIMAGEHEADER -DM16 -DSTM32F429_439xx --omf_browse=.\out\sccb.crf ..\src\SCCB.C]
                          THUMB

                          AREA ||i.SCCBSetAdress||, CODE, READONLY, ALIGN=2

                  SCCBSetAdress PROC
;;;9      
;;;10     void SCCBSetAdress(unsigned char add)
000000  4901              LDR      r1,|L1.8|
;;;11     {
;;;12     	sccbadd = add;
000002  7008              STRB     r0,[r1,#0]
;;;13     }
000004  4770              BX       lr
;;;14     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      sccbadd

                          AREA ||i.SCCB_GPIO_Config||, CODE, READONLY, ALIGN=2

                  SCCB_GPIO_Config PROC
;;;24     *******************************************************************************/
;;;25     void SCCB_GPIO_Config(void)
000000  b500              PUSH     {lr}
;;;26     {
000002  b087              SUB      sp,sp,#0x1c
;;;27     	I2C_InitTypeDef  SCCB_InitStructure;
;;;28     	GPIO_InitTypeDef  GPIO_InitStructure; 
;;;29     	
;;;30     	RCC_AHB1PeriphClockCmd(VISION_SCCB_SDA_GPIO_CLK | VISION_SCCB_SCL_GPIO_CLK,ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;31     	
;;;32     	RCC_APB1PeriphClockCmd(VISION_SCCB_CLK,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0588              LSLS     r0,r1,#22
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;33     	
;;;34     	GPIO_PinAFConfig(VISION_SCCB_SDA_GPIO_PORT, VISION_SCCB_SDA_SOURCE, VISION_SCCB_SDA_AF);
000014  2204              MOVS     r2,#4
000016  210b              MOVS     r1,#0xb
000018  481f              LDR      r0,|L2.152|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;35     	GPIO_PinAFConfig(VISION_SCCB_SCL_GPIO_PORT, VISION_SCCB_SCL_SOURCE, VISION_SCCB_SCL_AF);
00001e  2204              MOVS     r2,#4
000020  210a              MOVS     r1,#0xa
000022  481d              LDR      r0,|L2.152|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;36     	
;;;37     	GPIO_InitStructure.GPIO_Pin =  VISION_SCCB_SDA_PIN | VISION_SCCB_SCL_PIN;
000028  f44f6040          MOV      r0,#0xc00
00002c  9001              STR      r0,[sp,#4]
;;;38     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00002e  2002              MOVS     r0,#2
000030  f88d0008          STRB     r0,[sp,#8]
;;;39     	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
000034  2001              MOVS     r0,#1
000036  f88d000a          STRB     r0,[sp,#0xa]
;;;40     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003a  2002              MOVS     r0,#2
00003c  f88d0009          STRB     r0,[sp,#9]
;;;41     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000040  2001              MOVS     r0,#1
000042  f88d000b          STRB     r0,[sp,#0xb]
;;;42     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000046  a901              ADD      r1,sp,#4
000048  4813              LDR      r0,|L2.152|
00004a  f7fffffe          BL       GPIO_Init
;;;43     		
;;;44     	I2C_DeInit(VISION_SCCB);
00004e  4813              LDR      r0,|L2.156|
000050  f7fffffe          BL       I2C_DeInit
;;;45     	SCCB_InitStructure.I2C_Mode = I2C_Mode_I2C;
000054  2000              MOVS     r0,#0
000056  f8ad0010          STRH     r0,[sp,#0x10]
;;;46     	SCCB_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
00005a  f64b70ff          MOV      r0,#0xbfff
00005e  f8ad0012          STRH     r0,[sp,#0x12]
;;;47     	SCCB_InitStructure.I2C_OwnAddress1 = SCCB_SLAVE_ADDRESS7;
000062  20fe              MOVS     r0,#0xfe
000064  f8ad0014          STRH     r0,[sp,#0x14]
;;;48     	SCCB_InitStructure.I2C_Ack = I2C_Ack_Enable;
000068  f44f6080          MOV      r0,#0x400
00006c  f8ad0016          STRH     r0,[sp,#0x16]
;;;49     	SCCB_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000070  0100              LSLS     r0,r0,#4
000072  f8ad0018          STRH     r0,[sp,#0x18]
;;;50     	SCCB_InitStructure.I2C_ClockSpeed = SCCB_SPEED;
000076  480a              LDR      r0,|L2.160|
000078  9003              STR      r0,[sp,#0xc]
;;;51     	
;;;52     	I2C_Init(VISION_SCCB, &SCCB_InitStructure);
00007a  a903              ADD      r1,sp,#0xc
00007c  4807              LDR      r0,|L2.156|
00007e  f7fffffe          BL       I2C_Init
;;;53     	I2C_Cmd(VISION_SCCB, ENABLE);
000082  2101              MOVS     r1,#1
000084  4805              LDR      r0,|L2.156|
000086  f7fffffe          BL       I2C_Cmd
;;;54     
;;;55     	
;;;56     	I2C_AcknowledgeConfig(VISION_SCCB, ENABLE);	
00008a  2101              MOVS     r1,#1
00008c  4803              LDR      r0,|L2.156|
00008e  f7fffffe          BL       I2C_AcknowledgeConfig
;;;57     }
000092  b007              ADD      sp,sp,#0x1c
000094  bd00              POP      {pc}
;;;58     
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x40020400
                  |L2.156|
                          DCD      0x40005800
                  |L2.160|
                          DCD      0x000c3500

                          AREA ||i.SCCB_Read||, CODE, READONLY, ALIGN=2

                  SCCB_Read PROC
;;;210      */
;;;211    uint8_t SCCB_Read(uint8_t Reg, uint8_t *Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;212    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;213      uint32_t timeout = DCMI_TIMEOUT_MAX;
000008  485e              LDR      r0,|L3.388|
00000a  6804              LDR      r4,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;214    	u32 i;
;;;215        /* Clear AF flag if arised */
;;;216      I2C2->SR1 |= (uint16_t)0x0400;
00000c  485e              LDR      r0,|L3.392|
00000e  8800              LDRH     r0,[r0,#0]
000010  f4406080          ORR      r0,r0,#0x400
000014  495c              LDR      r1,|L3.392|
000016  8008              STRH     r0,[r1,#0]
;;;217    
;;;218      /* Generate the Start Condition */
;;;219      I2C_GenerateSTART(VISION_SCCB, ENABLE);
000018  2101              MOVS     r1,#1
00001a  485b              LDR      r0,|L3.392|
00001c  3814              SUBS     r0,r0,#0x14
00001e  f7fffffe          BL       I2C_GenerateSTART
;;;220    
;;;221      /* Test on I2C2 EV5 and clear it */
;;;222      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
000022  4858              LDR      r0,|L3.388|
000024  6804              LDR      r4,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;223      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_MODE_SELECT))
000026  e006              B        |L3.54|
                  |L3.40|
;;;224      {
;;;225        /* If the timeout delay is exeeded, exit with error code */
;;;226        if ((timeout--) == 0) return 0xFF;
000028  0020              MOVS     r0,r4
00002a  f1a40401          SUB      r4,r4,#1
00002e  d102              BNE      |L3.54|
000030  20ff              MOVS     r0,#0xff
                  |L3.50|
;;;227      } 
;;;228      /*-----------------------------------------------------------------------------------*/
;;;229      /* Send DCMI selcted device slave Address for write */
;;;230      I2C_Send7bitAddress(VISION_SCCB, sccbadd | 0x01 , I2C_Direction_Transmitter);
;;;231     
;;;232      /* Test on I2C2 EV6 and clear it */
;;;233      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;234      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
;;;235      {
;;;236        /* If the timeout delay is exeeded, exit with error code */
;;;237        if ((timeout--) == 0) return 0xFF;
;;;238      } 
;;;239      /*-----------------------------------------------------------------------------------*/
;;;240      /* Send I2C2 location address LSB */
;;;241      I2C_SendData(VISION_SCCB, (uint8_t)(Reg));
;;;242      for(i = 0; i< 0xffff;i++);
;;;243      /* Test on I2C2 EV8 and clear it */
;;;244      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;245      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;246      {
;;;247        /* If the timeout delay is exeeded, exit with error code */
;;;248        if ((timeout--) == 0) return 0xFF;
;;;249      } 
;;;250      
;;;251      /* Clear AF flag if arised */
;;;252      I2C2->SR1 |= (uint16_t)0x0400;
;;;253      /*-----------------------------------------------------------------------------------*/    
;;;254      /* Prepare Stop after receiving data */
;;;255      I2C_GenerateSTOP(VISION_SCCB, ENABLE);
;;;256    
;;;257      /*-----------------------------------------------------------------------------------*/
;;;258      /* Generate the Start Condition */
;;;259      I2C_GenerateSTART(VISION_SCCB, ENABLE);
;;;260      
;;;261      /* Test on I2C2 EV6 and clear it */
;;;262      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;263      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_MODE_SELECT))
;;;264      {
;;;265        /* If the timeout delay is exeeded, exit with error code */
;;;266        if ((timeout--) == 0) return 0xFF;
;;;267      } 
;;;268      /*-----------------------------------------------------------------------------------*/
;;;269      /* Send DCMI selcted device slave Address for write */
;;;270      I2C_Send7bitAddress(VISION_SCCB, sccbadd | 0x01, I2C_Direction_Receiver);
;;;271      for(i = 0; i< 0xffff;i++);
;;;272      /* Test on I2C2 EV6 and clear it */
;;;273      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;274      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
;;;275      {
;;;276        /* If the timeout delay is exeeded, exit with error code */
;;;277        if ((timeout--) == 0) return 0xFF;
;;;278      }
;;;279          
;;;280      /*-----------------------------------------------------------------------------------*/
;;;281      /* Prepare an NACK for the next data received */
;;;282      I2C_AcknowledgeConfig(VISION_SCCB, DISABLE);
;;;283    
;;;284      /* Test on VISION_SCCB EV7 and clear it */
;;;285      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;286      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_RECEIVED))
;;;287      {
;;;288        /* If the timeout delay is exeeded, exit with error code */
;;;289        if ((timeout--) == 0) return 0xFF;
;;;290      } 
;;;291      /*-----------------------------------------------------------------------------------*/    
;;;292      /* Prepare Stop after receiving data */
;;;293      I2C_GenerateSTOP(VISION_SCCB, ENABLE); 
;;;294    
;;;295      /*-----------------------------------------------------------------------------------*/
;;;296      /* Receive the Data */
;;;297      *Data = I2C_ReceiveData(VISION_SCCB);
;;;298      /* Clear AF flag if arised */
;;;299      I2C2->SR1 |= (uint16_t)0x0400;
;;;300    
;;;301      /* return the read data */
;;;302      return 0;
;;;303    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L3.54|
000036  4955              LDR      r1,|L3.396|
000038  4853              LDR      r0,|L3.392|
00003a  3814              SUBS     r0,r0,#0x14           ;223
00003c  f7fffffe          BL       I2C_CheckEvent
000040  2800              CMP      r0,#0                 ;223
000042  d0f1              BEQ      |L3.40|
000044  4852              LDR      r0,|L3.400|
000046  7800              LDRB     r0,[r0,#0]            ;230  ; sccbadd
000048  f0400101          ORR      r1,r0,#1              ;230
00004c  2200              MOVS     r2,#0                 ;230
00004e  484e              LDR      r0,|L3.392|
000050  3814              SUBS     r0,r0,#0x14           ;230
000052  f7fffffe          BL       I2C_Send7bitAddress
000056  484b              LDR      r0,|L3.388|
000058  6804              LDR      r4,[r0,#0]            ;233  ; DCMI_TIMEOUT_MAX
00005a  e005              B        |L3.104|
                  |L3.92|
00005c  0020              MOVS     r0,r4                 ;237
00005e  f1a40401          SUB      r4,r4,#1              ;237
000062  d101              BNE      |L3.104|
000064  20ff              MOVS     r0,#0xff              ;237
000066  e7e4              B        |L3.50|
                  |L3.104|
000068  494a              LDR      r1,|L3.404|
00006a  4847              LDR      r0,|L3.392|
00006c  3814              SUBS     r0,r0,#0x14           ;234
00006e  f7fffffe          BL       I2C_CheckEvent
000072  2800              CMP      r0,#0                 ;234
000074  d0f2              BEQ      |L3.92|
000076  4631              MOV      r1,r6                 ;241
000078  4843              LDR      r0,|L3.392|
00007a  3814              SUBS     r0,r0,#0x14           ;241
00007c  f7fffffe          BL       I2C_SendData
000080  2500              MOVS     r5,#0                 ;242
000082  e000              B        |L3.134|
                  |L3.132|
000084  1c6d              ADDS     r5,r5,#1              ;242
                  |L3.134|
000086  f64f70ff          MOV      r0,#0xffff            ;242
00008a  4285              CMP      r5,r0                 ;242
00008c  d3fa              BCC      |L3.132|
00008e  483d              LDR      r0,|L3.388|
000090  6804              LDR      r4,[r0,#0]            ;244  ; DCMI_TIMEOUT_MAX
000092  e005              B        |L3.160|
                  |L3.148|
000094  0020              MOVS     r0,r4                 ;248
000096  f1a40401          SUB      r4,r4,#1              ;248
00009a  d101              BNE      |L3.160|
00009c  20ff              MOVS     r0,#0xff              ;248
00009e  e7c8              B        |L3.50|
                  |L3.160|
0000a0  493c              LDR      r1,|L3.404|
0000a2  1c89              ADDS     r1,r1,#2              ;245
0000a4  4838              LDR      r0,|L3.392|
0000a6  3814              SUBS     r0,r0,#0x14           ;245
0000a8  f7fffffe          BL       I2C_CheckEvent
0000ac  2800              CMP      r0,#0                 ;245
0000ae  d0f1              BEQ      |L3.148|
0000b0  4835              LDR      r0,|L3.392|
0000b2  8800              LDRH     r0,[r0,#0]            ;252
0000b4  f4406080          ORR      r0,r0,#0x400          ;252
0000b8  4933              LDR      r1,|L3.392|
0000ba  8008              STRH     r0,[r1,#0]            ;252
0000bc  2101              MOVS     r1,#1                 ;255
0000be  4832              LDR      r0,|L3.392|
0000c0  3814              SUBS     r0,r0,#0x14           ;255
0000c2  f7fffffe          BL       I2C_GenerateSTOP
0000c6  2101              MOVS     r1,#1                 ;259
0000c8  482f              LDR      r0,|L3.392|
0000ca  3814              SUBS     r0,r0,#0x14           ;259
0000cc  f7fffffe          BL       I2C_GenerateSTART
0000d0  482c              LDR      r0,|L3.388|
0000d2  6804              LDR      r4,[r0,#0]            ;262  ; DCMI_TIMEOUT_MAX
0000d4  e005              B        |L3.226|
                  |L3.214|
0000d6  0020              MOVS     r0,r4                 ;266
0000d8  f1a40401          SUB      r4,r4,#1              ;266
0000dc  d101              BNE      |L3.226|
0000de  20ff              MOVS     r0,#0xff              ;266
0000e0  e7a7              B        |L3.50|
                  |L3.226|
0000e2  492a              LDR      r1,|L3.396|
0000e4  4828              LDR      r0,|L3.392|
0000e6  3814              SUBS     r0,r0,#0x14           ;263
0000e8  f7fffffe          BL       I2C_CheckEvent
0000ec  2800              CMP      r0,#0                 ;263
0000ee  d0f2              BEQ      |L3.214|
0000f0  4827              LDR      r0,|L3.400|
0000f2  7800              LDRB     r0,[r0,#0]            ;270  ; sccbadd
0000f4  f0400101          ORR      r1,r0,#1              ;270
0000f8  2201              MOVS     r2,#1                 ;270
0000fa  4823              LDR      r0,|L3.392|
0000fc  3814              SUBS     r0,r0,#0x14           ;270
0000fe  f7fffffe          BL       I2C_Send7bitAddress
000102  2500              MOVS     r5,#0                 ;271
000104  e000              B        |L3.264|
                  |L3.262|
000106  1c6d              ADDS     r5,r5,#1              ;271
                  |L3.264|
000108  f64f70ff          MOV      r0,#0xffff            ;271
00010c  4285              CMP      r5,r0                 ;271
00010e  d3fa              BCC      |L3.262|
000110  481c              LDR      r0,|L3.388|
000112  6804              LDR      r4,[r0,#0]            ;273  ; DCMI_TIMEOUT_MAX
000114  e005              B        |L3.290|
                  |L3.278|
000116  0020              MOVS     r0,r4                 ;277
000118  f1a40401          SUB      r4,r4,#1              ;277
00011c  d101              BNE      |L3.290|
00011e  20ff              MOVS     r0,#0xff              ;277
000120  e787              B        |L3.50|
                  |L3.290|
000122  491a              LDR      r1,|L3.396|
000124  1c49              ADDS     r1,r1,#1              ;274
000126  4818              LDR      r0,|L3.392|
000128  3814              SUBS     r0,r0,#0x14           ;274
00012a  f7fffffe          BL       I2C_CheckEvent
00012e  2800              CMP      r0,#0                 ;274
000130  d0f1              BEQ      |L3.278|
000132  2100              MOVS     r1,#0                 ;282
000134  4814              LDR      r0,|L3.392|
000136  3814              SUBS     r0,r0,#0x14           ;282
000138  f7fffffe          BL       I2C_AcknowledgeConfig
00013c  4811              LDR      r0,|L3.388|
00013e  6804              LDR      r4,[r0,#0]            ;285  ; DCMI_TIMEOUT_MAX
000140  e005              B        |L3.334|
                  |L3.322|
000142  0020              MOVS     r0,r4                 ;289
000144  f1a40401          SUB      r4,r4,#1              ;289
000148  d101              BNE      |L3.334|
00014a  20ff              MOVS     r0,#0xff              ;289
00014c  e771              B        |L3.50|
                  |L3.334|
00014e  490f              LDR      r1,|L3.396|
000150  313f              ADDS     r1,r1,#0x3f           ;286
000152  480d              LDR      r0,|L3.392|
000154  3814              SUBS     r0,r0,#0x14           ;286
000156  f7fffffe          BL       I2C_CheckEvent
00015a  2800              CMP      r0,#0                 ;286
00015c  d0f1              BEQ      |L3.322|
00015e  2101              MOVS     r1,#1                 ;293
000160  4809              LDR      r0,|L3.392|
000162  3814              SUBS     r0,r0,#0x14           ;293
000164  f7fffffe          BL       I2C_GenerateSTOP
000168  4807              LDR      r0,|L3.392|
00016a  3814              SUBS     r0,r0,#0x14           ;297
00016c  f7fffffe          BL       I2C_ReceiveData
000170  7038              STRB     r0,[r7,#0]            ;297
000172  4805              LDR      r0,|L3.392|
000174  8800              LDRH     r0,[r0,#0]            ;299
000176  f4406080          ORR      r0,r0,#0x400          ;299
00017a  4903              LDR      r1,|L3.392|
00017c  8008              STRH     r0,[r1,#0]            ;299
00017e  2000              MOVS     r0,#0                 ;302
000180  e757              B        |L3.50|
;;;304    
                          ENDP

000182  0000              DCW      0x0000
                  |L3.388|
                          DCD      DCMI_TIMEOUT_MAX
                  |L3.392|
                          DCD      0x40005814
                  |L3.396|
                          DCD      0x00030001
                  |L3.400|
                          DCD      sccbadd
                  |L3.404|
                          DCD      0x00070082

                          AREA ||i.SCCB_Read16||, CODE, READONLY, ALIGN=2

                  SCCB_Read16 PROC
;;;311      */
;;;312    uint8_t SCCB_Read16(u16 Reg, uint8_t *Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;313    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;314      uint32_t timeout = DCMI_TIMEOUT_MAX;
000008  486c              LDR      r0,|L4.444|
00000a  6804              LDR      r4,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;315    	u32 i;
;;;316        /* Clear AF flag if arised */
;;;317      I2C2->SR1 |= (uint16_t)0x0400;
00000c  486c              LDR      r0,|L4.448|
00000e  8800              LDRH     r0,[r0,#0]
000010  f4406080          ORR      r0,r0,#0x400
000014  496a              LDR      r1,|L4.448|
000016  8008              STRH     r0,[r1,#0]
;;;318    
;;;319      /* Generate the Start Condition */
;;;320      I2C_GenerateSTART(VISION_SCCB, ENABLE);
000018  2101              MOVS     r1,#1
00001a  4869              LDR      r0,|L4.448|
00001c  3814              SUBS     r0,r0,#0x14
00001e  f7fffffe          BL       I2C_GenerateSTART
;;;321    
;;;322      /* Test on I2C2 EV5 and clear it */
;;;323      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
000022  4866              LDR      r0,|L4.444|
000024  6804              LDR      r4,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;324      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_MODE_SELECT))
000026  e006              B        |L4.54|
                  |L4.40|
;;;325      {
;;;326        /* If the timeout delay is exeeded, exit with error code */
;;;327        if ((timeout--) == 0) return 0xFF;
000028  0020              MOVS     r0,r4
00002a  f1a40401          SUB      r4,r4,#1
00002e  d102              BNE      |L4.54|
000030  20ff              MOVS     r0,#0xff
                  |L4.50|
;;;328      } 
;;;329    	
;;;330      /*-----------------------------------------------------------------------------------*/
;;;331      /* Send DCMI selcted device slave Address for write */
;;;332      I2C_Send7bitAddress(VISION_SCCB, sccbadd | 0x01 , I2C_Direction_Transmitter);
;;;333     
;;;334      /* Test on I2C2 EV6 and clear it */
;;;335      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;336      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
;;;337      {
;;;338        /* If the timeout delay is exeeded, exit with error code */
;;;339        if ((timeout--) == 0) return 0xFF;
;;;340      } 
;;;341      /*-----------------------------------------------------------------------------------*/
;;;342      /* Send DCMI selcted device slave Address for write */
;;;343      /* Send I2C2 location address LSB */
;;;344      I2C_SendData(VISION_SCCB, (uint8_t)(Reg>>8));
;;;345      for(i = 0; i< 0xffff;i++);
;;;346    	
;;;347      /* Test on I2C2 EV6 and clear it */
;;;348      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;349      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;350      {
;;;351        /* If the timeout delay is exeeded, exit with error code */
;;;352        if ((timeout--) == 0) return 0xFF;
;;;353      } 
;;;354      /*-----------------------------------------------------------------------------------*/
;;;355    	
;;;356      /* Send I2C2 location address LSB */
;;;357      I2C_SendData(VISION_SCCB, (uint8_t)(Reg & 0x00FF));
;;;358      for(i = 0; i< 0xffff;i++);
;;;359      /* Test on I2C2 EV8 and clear it */
;;;360      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;361      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;362      {
;;;363        /* If the timeout delay is exeeded, exit with error code */
;;;364        if ((timeout--) == 0) return 0xFF;
;;;365      } 
;;;366      
;;;367      /* Clear AF flag if arised */
;;;368      I2C2->SR1 |= (uint16_t)0x0400;
;;;369      /*-----------------------------------------------------------------------------------*/    
;;;370      /* Prepare Stop after receiving data */
;;;371      I2C_GenerateSTOP(VISION_SCCB, ENABLE);
;;;372    
;;;373      /*-----------------------------------------------------------------------------------*/
;;;374      /* Generate the Start Condition */
;;;375      I2C_GenerateSTART(VISION_SCCB, ENABLE);
;;;376      
;;;377      /* Test on I2C2 EV6 and clear it */
;;;378      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;379      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_MODE_SELECT))
;;;380      {
;;;381        /* If the timeout delay is exeeded, exit with error code */
;;;382        if ((timeout--) == 0) return 0xFF;
;;;383      } 
;;;384      /*-----------------------------------------------------------------------------------*/
;;;385      /* Send DCMI selcted device slave Address for write */
;;;386      I2C_Send7bitAddress(VISION_SCCB, sccbadd | 0x01, I2C_Direction_Receiver);
;;;387      for(i = 0; i< 0xffff;i++);
;;;388      /* Test on I2C2 EV6 and clear it */
;;;389      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;390      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
;;;391      {
;;;392        /* If the timeout delay is exeeded, exit with error code */
;;;393        if ((timeout--) == 0) return 0xFF;
;;;394      }
;;;395          
;;;396      /*-----------------------------------------------------------------------------------*/
;;;397      /* Prepare an NACK for the next data received */
;;;398      I2C_AcknowledgeConfig(VISION_SCCB, DISABLE);
;;;399    
;;;400      /* Test on VISION_SCCB EV7 and clear it */
;;;401      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;402      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_RECEIVED))
;;;403      {
;;;404        /* If the timeout delay is exeeded, exit with error code */
;;;405        if ((timeout--) == 0) return 0xFF;
;;;406      } 
;;;407      /*-----------------------------------------------------------------------------------*/    
;;;408      /* Prepare Stop after receiving data */
;;;409      I2C_GenerateSTOP(VISION_SCCB, ENABLE); 
;;;410    
;;;411      /*-----------------------------------------------------------------------------------*/
;;;412      /* Receive the Data */
;;;413      *Data = I2C_ReceiveData(VISION_SCCB);
;;;414      /* Clear AF flag if arised */
;;;415      I2C2->SR1 |= (uint16_t)0x0400;
;;;416    
;;;417      /* return the read data */
;;;418      return 0;
;;;419    }
000032  e8bd81f0          POP      {r4-r8,pc}
                  |L4.54|
000036  4963              LDR      r1,|L4.452|
000038  4861              LDR      r0,|L4.448|
00003a  3814              SUBS     r0,r0,#0x14           ;324
00003c  f7fffffe          BL       I2C_CheckEvent
000040  2800              CMP      r0,#0                 ;324
000042  d0f1              BEQ      |L4.40|
000044  4860              LDR      r0,|L4.456|
000046  7800              LDRB     r0,[r0,#0]            ;332  ; sccbadd
000048  f0400101          ORR      r1,r0,#1              ;332
00004c  2200              MOVS     r2,#0                 ;332
00004e  485c              LDR      r0,|L4.448|
000050  3814              SUBS     r0,r0,#0x14           ;332
000052  f7fffffe          BL       I2C_Send7bitAddress
000056  4859              LDR      r0,|L4.444|
000058  6804              LDR      r4,[r0,#0]            ;335  ; DCMI_TIMEOUT_MAX
00005a  e005              B        |L4.104|
                  |L4.92|
00005c  0020              MOVS     r0,r4                 ;339
00005e  f1a40401          SUB      r4,r4,#1              ;339
000062  d101              BNE      |L4.104|
000064  20ff              MOVS     r0,#0xff              ;339
000066  e7e4              B        |L4.50|
                  |L4.104|
000068  4958              LDR      r1,|L4.460|
00006a  4855              LDR      r0,|L4.448|
00006c  3814              SUBS     r0,r0,#0x14           ;336
00006e  f7fffffe          BL       I2C_CheckEvent
000072  2800              CMP      r0,#0                 ;336
000074  d0f2              BEQ      |L4.92|
000076  1231              ASRS     r1,r6,#8              ;344
000078  4851              LDR      r0,|L4.448|
00007a  3814              SUBS     r0,r0,#0x14           ;344
00007c  f7fffffe          BL       I2C_SendData
000080  2500              MOVS     r5,#0                 ;345
000082  e000              B        |L4.134|
                  |L4.132|
000084  1c6d              ADDS     r5,r5,#1              ;345
                  |L4.134|
000086  f64f70ff          MOV      r0,#0xffff            ;345
00008a  4285              CMP      r5,r0                 ;345
00008c  d3fa              BCC      |L4.132|
00008e  484b              LDR      r0,|L4.444|
000090  6804              LDR      r4,[r0,#0]            ;348  ; DCMI_TIMEOUT_MAX
000092  e005              B        |L4.160|
                  |L4.148|
000094  0020              MOVS     r0,r4                 ;352
000096  f1a40401          SUB      r4,r4,#1              ;352
00009a  d101              BNE      |L4.160|
00009c  20ff              MOVS     r0,#0xff              ;352
00009e  e7c8              B        |L4.50|
                  |L4.160|
0000a0  494a              LDR      r1,|L4.460|
0000a2  1c89              ADDS     r1,r1,#2              ;349
0000a4  4846              LDR      r0,|L4.448|
0000a6  3814              SUBS     r0,r0,#0x14           ;349
0000a8  f7fffffe          BL       I2C_CheckEvent
0000ac  2800              CMP      r0,#0                 ;349
0000ae  d0f1              BEQ      |L4.148|
0000b0  b2f1              UXTB     r1,r6                 ;357
0000b2  4843              LDR      r0,|L4.448|
0000b4  3814              SUBS     r0,r0,#0x14           ;357
0000b6  f7fffffe          BL       I2C_SendData
0000ba  2500              MOVS     r5,#0                 ;358
0000bc  e000              B        |L4.192|
                  |L4.190|
0000be  1c6d              ADDS     r5,r5,#1              ;358
                  |L4.192|
0000c0  f64f70ff          MOV      r0,#0xffff            ;358
0000c4  4285              CMP      r5,r0                 ;358
0000c6  d3fa              BCC      |L4.190|
0000c8  483c              LDR      r0,|L4.444|
0000ca  6804              LDR      r4,[r0,#0]            ;360  ; DCMI_TIMEOUT_MAX
0000cc  e005              B        |L4.218|
                  |L4.206|
0000ce  0020              MOVS     r0,r4                 ;364
0000d0  f1a40401          SUB      r4,r4,#1              ;364
0000d4  d101              BNE      |L4.218|
0000d6  20ff              MOVS     r0,#0xff              ;364
0000d8  e7ab              B        |L4.50|
                  |L4.218|
0000da  493c              LDR      r1,|L4.460|
0000dc  1c89              ADDS     r1,r1,#2              ;361
0000de  4838              LDR      r0,|L4.448|
0000e0  3814              SUBS     r0,r0,#0x14           ;361
0000e2  f7fffffe          BL       I2C_CheckEvent
0000e6  2800              CMP      r0,#0                 ;361
0000e8  d0f1              BEQ      |L4.206|
0000ea  4835              LDR      r0,|L4.448|
0000ec  8800              LDRH     r0,[r0,#0]            ;368
0000ee  f4406080          ORR      r0,r0,#0x400          ;368
0000f2  4933              LDR      r1,|L4.448|
0000f4  8008              STRH     r0,[r1,#0]            ;368
0000f6  2101              MOVS     r1,#1                 ;371
0000f8  4831              LDR      r0,|L4.448|
0000fa  3814              SUBS     r0,r0,#0x14           ;371
0000fc  f7fffffe          BL       I2C_GenerateSTOP
000100  2101              MOVS     r1,#1                 ;375
000102  482f              LDR      r0,|L4.448|
000104  3814              SUBS     r0,r0,#0x14           ;375
000106  f7fffffe          BL       I2C_GenerateSTART
00010a  482c              LDR      r0,|L4.444|
00010c  6804              LDR      r4,[r0,#0]            ;378  ; DCMI_TIMEOUT_MAX
00010e  e005              B        |L4.284|
                  |L4.272|
000110  0020              MOVS     r0,r4                 ;382
000112  f1a40401          SUB      r4,r4,#1              ;382
000116  d101              BNE      |L4.284|
000118  20ff              MOVS     r0,#0xff              ;382
00011a  e78a              B        |L4.50|
                  |L4.284|
00011c  4929              LDR      r1,|L4.452|
00011e  4828              LDR      r0,|L4.448|
000120  3814              SUBS     r0,r0,#0x14           ;379
000122  f7fffffe          BL       I2C_CheckEvent
000126  2800              CMP      r0,#0                 ;379
000128  d0f2              BEQ      |L4.272|
00012a  4827              LDR      r0,|L4.456|
00012c  7800              LDRB     r0,[r0,#0]            ;386  ; sccbadd
00012e  f0400101          ORR      r1,r0,#1              ;386
000132  2201              MOVS     r2,#1                 ;386
000134  4822              LDR      r0,|L4.448|
000136  3814              SUBS     r0,r0,#0x14           ;386
000138  f7fffffe          BL       I2C_Send7bitAddress
00013c  2500              MOVS     r5,#0                 ;387
00013e  e000              B        |L4.322|
                  |L4.320|
000140  1c6d              ADDS     r5,r5,#1              ;387
                  |L4.322|
000142  f64f70ff          MOV      r0,#0xffff            ;387
000146  4285              CMP      r5,r0                 ;387
000148  d3fa              BCC      |L4.320|
00014a  481c              LDR      r0,|L4.444|
00014c  6804              LDR      r4,[r0,#0]            ;389  ; DCMI_TIMEOUT_MAX
00014e  e005              B        |L4.348|
                  |L4.336|
000150  0020              MOVS     r0,r4                 ;393
000152  f1a40401          SUB      r4,r4,#1              ;393
000156  d101              BNE      |L4.348|
000158  20ff              MOVS     r0,#0xff              ;393
00015a  e76a              B        |L4.50|
                  |L4.348|
00015c  4919              LDR      r1,|L4.452|
00015e  1c49              ADDS     r1,r1,#1              ;390
000160  4817              LDR      r0,|L4.448|
000162  3814              SUBS     r0,r0,#0x14           ;390
000164  f7fffffe          BL       I2C_CheckEvent
000168  2800              CMP      r0,#0                 ;390
00016a  d0f1              BEQ      |L4.336|
00016c  2100              MOVS     r1,#0                 ;398
00016e  4814              LDR      r0,|L4.448|
000170  3814              SUBS     r0,r0,#0x14           ;398
000172  f7fffffe          BL       I2C_AcknowledgeConfig
000176  4811              LDR      r0,|L4.444|
000178  6804              LDR      r4,[r0,#0]            ;401  ; DCMI_TIMEOUT_MAX
00017a  e005              B        |L4.392|
                  |L4.380|
00017c  0020              MOVS     r0,r4                 ;405
00017e  f1a40401          SUB      r4,r4,#1              ;405
000182  d101              BNE      |L4.392|
000184  20ff              MOVS     r0,#0xff              ;405
000186  e754              B        |L4.50|
                  |L4.392|
000188  490e              LDR      r1,|L4.452|
00018a  313f              ADDS     r1,r1,#0x3f           ;402
00018c  480c              LDR      r0,|L4.448|
00018e  3814              SUBS     r0,r0,#0x14           ;402
000190  f7fffffe          BL       I2C_CheckEvent
000194  2800              CMP      r0,#0                 ;402
000196  d0f1              BEQ      |L4.380|
000198  2101              MOVS     r1,#1                 ;409
00019a  4809              LDR      r0,|L4.448|
00019c  3814              SUBS     r0,r0,#0x14           ;409
00019e  f7fffffe          BL       I2C_GenerateSTOP
0001a2  4807              LDR      r0,|L4.448|
0001a4  3814              SUBS     r0,r0,#0x14           ;413
0001a6  f7fffffe          BL       I2C_ReceiveData
0001aa  7038              STRB     r0,[r7,#0]            ;413
0001ac  4804              LDR      r0,|L4.448|
0001ae  8800              LDRH     r0,[r0,#0]            ;415
0001b0  f4406080          ORR      r0,r0,#0x400          ;415
0001b4  4902              LDR      r1,|L4.448|
0001b6  8008              STRH     r0,[r1,#0]            ;415
0001b8  2000              MOVS     r0,#0                 ;418
0001ba  e73a              B        |L4.50|
                          ENDP

                  |L4.444|
                          DCD      DCMI_TIMEOUT_MAX
                  |L4.448|
                          DCD      0x40005814
                  |L4.452|
                          DCD      0x00030001
                  |L4.456|
                          DCD      sccbadd
                  |L4.460|
                          DCD      0x00070082

                          AREA ||i.SCCB_Write||, CODE, READONLY, ALIGN=2

                  SCCB_Write PROC
;;;66       */
;;;67     uint8_t SCCB_Write(uint8_t Reg, uint8_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;68     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;69       uint32_t timeout = DCMI_TIMEOUT_MAX;
000006  482c              LDR      r0,|L5.184|
000008  6804              LDR      r4,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;70       
;;;71       /* Generate the Start Condition */
;;;72       I2C_GenerateSTART(VISION_SCCB, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  482b              LDR      r0,|L5.188|
00000e  f7fffffe          BL       I2C_GenerateSTART
;;;73     
;;;74       /* Test on I2C2 EV5 and clear it */
;;;75       timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
000012  4829              LDR      r0,|L5.184|
000014  6804              LDR      r4,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;76       while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_MODE_SELECT))
000016  e005              B        |L5.36|
                  |L5.24|
;;;77       {
;;;78         /* If the timeout delay is exeeded, exit with error code */
;;;79         if ((timeout--) == 0) return 0xFF;
000018  0020              MOVS     r0,r4
00001a  f1a40401          SUB      r4,r4,#1
00001e  d101              BNE      |L5.36|
000020  20ff              MOVS     r0,#0xff
                  |L5.34|
;;;80       }
;;;81        /*-----------------------------------------------------------------------------------*/
;;;82       /* Send DCMI selcted device slave Address for write */
;;;83       I2C_Send7bitAddress(VISION_SCCB, sccbadd , I2C_Direction_Transmitter);
;;;84      // for(i = 0; i< 0xff;i++);
;;;85       /* Test on I2C2 EV6 and clear it */
;;;86       timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;87       while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
;;;88       {
;;;89         /* If the timeout delay is exeeded, exit with error code */
;;;90         if ((timeout--) == 0) return 0xFF;
;;;91       }
;;;92        /*-----------------------------------------------------------------------------------*/
;;;93       /* Send I2C2 location address LSB */
;;;94       I2C_SendData(VISION_SCCB, (uint8_t)(Reg));
;;;95       //for(i = 0; i< 0xff;i++);
;;;96       /* Test on I2C2 EV8 and clear it */
;;;97       timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;98       while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;99       {
;;;100        /* If the timeout delay is exeeded, exit with error code */
;;;101        if ((timeout--) == 0) return 0xFF;
;;;102      }
;;;103       /*-----------------------------------------------------------------------------------*/
;;;104      /* Send Data */
;;;105      I2C_SendData(VISION_SCCB, Data);    
;;;106      //for(i = 0; i< 0xff;i++);
;;;107      /* Test on I2C2 EV8 and clear it */
;;;108      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;109      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;110      {
;;;111        /* If the timeout delay is exeeded, exit with error code */
;;;112        if ((timeout--) == 0) return 0xFF;
;;;113      }  
;;;114       /*-----------------------------------------------------------------------------------*/
;;;115      /* Send I2C2 STOP Condition */
;;;116      I2C_GenerateSTOP(VISION_SCCB, ENABLE);
;;;117      //for(i = 0; i< 0xff;i++);
;;;118      /* If operation is OK, return 0 */
;;;119      return 0;
;;;120    }
000022  bd70              POP      {r4-r6,pc}
                  |L5.36|
000024  4926              LDR      r1,|L5.192|
000026  4825              LDR      r0,|L5.188|
000028  f7fffffe          BL       I2C_CheckEvent
00002c  2800              CMP      r0,#0                 ;76
00002e  d0f3              BEQ      |L5.24|
000030  2200              MOVS     r2,#0                 ;83
000032  4824              LDR      r0,|L5.196|
000034  7801              LDRB     r1,[r0,#0]            ;83  ; sccbadd
000036  4821              LDR      r0,|L5.188|
000038  f7fffffe          BL       I2C_Send7bitAddress
00003c  481e              LDR      r0,|L5.184|
00003e  6804              LDR      r4,[r0,#0]            ;86  ; DCMI_TIMEOUT_MAX
000040  e005              B        |L5.78|
                  |L5.66|
000042  0020              MOVS     r0,r4                 ;90
000044  f1a40401          SUB      r4,r4,#1              ;90
000048  d101              BNE      |L5.78|
00004a  20ff              MOVS     r0,#0xff              ;90
00004c  e7e9              B        |L5.34|
                  |L5.78|
00004e  491e              LDR      r1,|L5.200|
000050  481a              LDR      r0,|L5.188|
000052  f7fffffe          BL       I2C_CheckEvent
000056  2800              CMP      r0,#0                 ;87
000058  d0f3              BEQ      |L5.66|
00005a  4629              MOV      r1,r5                 ;94
00005c  4817              LDR      r0,|L5.188|
00005e  f7fffffe          BL       I2C_SendData
000062  4815              LDR      r0,|L5.184|
000064  6804              LDR      r4,[r0,#0]            ;97  ; DCMI_TIMEOUT_MAX
000066  e005              B        |L5.116|
                  |L5.104|
000068  0020              MOVS     r0,r4                 ;101
00006a  f1a40401          SUB      r4,r4,#1              ;101
00006e  d101              BNE      |L5.116|
000070  20ff              MOVS     r0,#0xff              ;101
000072  e7d6              B        |L5.34|
                  |L5.116|
000074  4914              LDR      r1,|L5.200|
000076  1c89              ADDS     r1,r1,#2              ;98
000078  4810              LDR      r0,|L5.188|
00007a  f7fffffe          BL       I2C_CheckEvent
00007e  2800              CMP      r0,#0                 ;98
000080  d0f2              BEQ      |L5.104|
000082  4631              MOV      r1,r6                 ;105
000084  480d              LDR      r0,|L5.188|
000086  f7fffffe          BL       I2C_SendData
00008a  480b              LDR      r0,|L5.184|
00008c  6804              LDR      r4,[r0,#0]            ;108  ; DCMI_TIMEOUT_MAX
00008e  e005              B        |L5.156|
                  |L5.144|
000090  0020              MOVS     r0,r4                 ;112
000092  f1a40401          SUB      r4,r4,#1              ;112
000096  d101              BNE      |L5.156|
000098  20ff              MOVS     r0,#0xff              ;112
00009a  e7c2              B        |L5.34|
                  |L5.156|
00009c  490a              LDR      r1,|L5.200|
00009e  1c89              ADDS     r1,r1,#2              ;109
0000a0  4806              LDR      r0,|L5.188|
0000a2  f7fffffe          BL       I2C_CheckEvent
0000a6  2800              CMP      r0,#0                 ;109
0000a8  d0f2              BEQ      |L5.144|
0000aa  2101              MOVS     r1,#1                 ;116
0000ac  4803              LDR      r0,|L5.188|
0000ae  f7fffffe          BL       I2C_GenerateSTOP
0000b2  2000              MOVS     r0,#0                 ;119
0000b4  e7b5              B        |L5.34|
;;;121    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L5.184|
                          DCD      DCMI_TIMEOUT_MAX
                  |L5.188|
                          DCD      0x40005800
                  |L5.192|
                          DCD      0x00030001
                  |L5.196|
                          DCD      sccbadd
                  |L5.200|
                          DCD      0x00070082

                          AREA ||i.SCCB_Write16||, CODE, READONLY, ALIGN=2

                  SCCB_Write16 PROC
;;;129      */
;;;130    uint8_t SCCB_Write16(u16 Reg, u8 Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;132      uint32_t i,timeout = DCMI_TIMEOUT_MAX;
000008  483d              LDR      r0,|L6.256|
00000a  6805              LDR      r5,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;133      
;;;134      /* Generate the Start Condition */
;;;135      I2C_GenerateSTART(VISION_SCCB, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  483d              LDR      r0,|L6.260|
000010  f7fffffe          BL       I2C_GenerateSTART
;;;136    
;;;137      /* Test on I2C2 EV5 and clear it */
;;;138      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
000014  483a              LDR      r0,|L6.256|
000016  6805              LDR      r5,[r0,#0]  ; DCMI_TIMEOUT_MAX
;;;139      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_MODE_SELECT))
000018  e006              B        |L6.40|
                  |L6.26|
;;;140      {
;;;141        /* If the timeout delay is exeeded, exit with error code */
;;;142        if ((timeout--) == 0) return 0xFF;
00001a  0028              MOVS     r0,r5
00001c  f1a50501          SUB      r5,r5,#1
000020  d102              BNE      |L6.40|
000022  20ff              MOVS     r0,#0xff
                  |L6.36|
;;;143      }
;;;144    	
;;;145      /*-----------------------------------------------------------------------------------*/
;;;146      /* Send DCMI selcted device slave Address for write */
;;;147      I2C_Send7bitAddress(VISION_SCCB, sccbadd , I2C_Direction_Transmitter);
;;;148      for(i = 0; i< 0xff;i++);
;;;149      /* Test on I2C2 EV6 and clear it */
;;;150      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;151      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
;;;152      {
;;;153        /* If the timeout delay is exeeded, exit with error code */
;;;154        if ((timeout--) == 0) return 0xFF;
;;;155      }
;;;156    	
;;;157    	
;;;158      /*-----------------------------------------------------------------------------------*/
;;;159      /* Send I2C2 location address MSB8 */
;;;160      I2C_SendData(VISION_SCCB, (uint8_t)(Reg>>8));
;;;161      //for(i = 0; i< 0xff;i++);
;;;162      /* Test on I2C2 EV8 and clear it */
;;;163      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;164      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;165      {
;;;166        /* If the timeout delay is exeeded, exit with error code */
;;;167        if ((timeout--) == 0) return 0xFF;
;;;168      }
;;;169      /*-----------------------------------------------------------------------------------*/
;;;170    	
;;;171    	/*-----------------------------------------------------------------------------------*/
;;;172      /* Send I2C2 location address LSB8 */
;;;173      I2C_SendData(VISION_SCCB, (uint8_t)(Reg&0x00FF));
;;;174      for(i = 0; i< 0xff;i++);
;;;175      /* Test on I2C2 EV8 and clear it */
;;;176      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;177      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;178      {
;;;179        /* If the timeout delay is exeeded, exit with error code */
;;;180        if ((timeout--) == 0) return 0xFF;
;;;181      }
;;;182      /*-----------------------------------------------------------------------------------*/
;;;183      /* Send Data */
;;;184      I2C_SendData(VISION_SCCB, Data);    
;;;185      //for(i = 0; i< 0xff;i++);
;;;186      /* Test on I2C2 EV8 and clear it */
;;;187      timeout = DCMI_TIMEOUT_MAX; /* Initialize timeout value */
;;;188      while(!I2C_CheckEvent(VISION_SCCB, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
;;;189      {
;;;190        /* If the timeout delay is exeeded, exit with error code */
;;;191        if ((timeout--) == 0) return 0xFF;
;;;192      }  
;;;193      /*-----------------------------------------------------------------------------------*/
;;;194      /* Send I2C2 STOP Condition */
;;;195      I2C_GenerateSTOP(VISION_SCCB, ENABLE);
;;;196     for(i = 0; i< 0xff;i++);
;;;197      /* If operation is OK, return 0 */
;;;198    	//Delayms(1); 
;;;199      return 0;
;;;200    }
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L6.40|
000028  4937              LDR      r1,|L6.264|
00002a  4836              LDR      r0,|L6.260|
00002c  f7fffffe          BL       I2C_CheckEvent
000030  2800              CMP      r0,#0                 ;139
000032  d0f2              BEQ      |L6.26|
000034  2200              MOVS     r2,#0                 ;147
000036  4835              LDR      r0,|L6.268|
000038  7801              LDRB     r1,[r0,#0]            ;147  ; sccbadd
00003a  4832              LDR      r0,|L6.260|
00003c  f7fffffe          BL       I2C_Send7bitAddress
000040  2400              MOVS     r4,#0                 ;148
000042  e000              B        |L6.70|
                  |L6.68|
000044  1c64              ADDS     r4,r4,#1              ;148
                  |L6.70|
000046  2cff              CMP      r4,#0xff              ;148
000048  d3fc              BCC      |L6.68|
00004a  482d              LDR      r0,|L6.256|
00004c  6805              LDR      r5,[r0,#0]            ;150  ; DCMI_TIMEOUT_MAX
00004e  e005              B        |L6.92|
                  |L6.80|
000050  0028              MOVS     r0,r5                 ;154
000052  f1a50501          SUB      r5,r5,#1              ;154
000056  d101              BNE      |L6.92|
000058  20ff              MOVS     r0,#0xff              ;154
00005a  e7e3              B        |L6.36|
                  |L6.92|
00005c  492c              LDR      r1,|L6.272|
00005e  4829              LDR      r0,|L6.260|
000060  f7fffffe          BL       I2C_CheckEvent
000064  2800              CMP      r0,#0                 ;151
000066  d0f3              BEQ      |L6.80|
000068  1231              ASRS     r1,r6,#8              ;160
00006a  4826              LDR      r0,|L6.260|
00006c  f7fffffe          BL       I2C_SendData
000070  4823              LDR      r0,|L6.256|
000072  6805              LDR      r5,[r0,#0]            ;163  ; DCMI_TIMEOUT_MAX
000074  e005              B        |L6.130|
                  |L6.118|
000076  0028              MOVS     r0,r5                 ;167
000078  f1a50501          SUB      r5,r5,#1              ;167
00007c  d101              BNE      |L6.130|
00007e  20ff              MOVS     r0,#0xff              ;167
000080  e7d0              B        |L6.36|
                  |L6.130|
000082  4923              LDR      r1,|L6.272|
000084  1c89              ADDS     r1,r1,#2              ;164
000086  481f              LDR      r0,|L6.260|
000088  f7fffffe          BL       I2C_CheckEvent
00008c  2800              CMP      r0,#0                 ;164
00008e  d0f2              BEQ      |L6.118|
000090  b2f1              UXTB     r1,r6                 ;173
000092  481c              LDR      r0,|L6.260|
000094  f7fffffe          BL       I2C_SendData
000098  2400              MOVS     r4,#0                 ;174
00009a  e000              B        |L6.158|
                  |L6.156|
00009c  1c64              ADDS     r4,r4,#1              ;174
                  |L6.158|
00009e  2cff              CMP      r4,#0xff              ;174
0000a0  d3fc              BCC      |L6.156|
0000a2  4817              LDR      r0,|L6.256|
0000a4  6805              LDR      r5,[r0,#0]            ;176  ; DCMI_TIMEOUT_MAX
0000a6  e005              B        |L6.180|
                  |L6.168|
0000a8  0028              MOVS     r0,r5                 ;180
0000aa  f1a50501          SUB      r5,r5,#1              ;180
0000ae  d101              BNE      |L6.180|
0000b0  20ff              MOVS     r0,#0xff              ;180
0000b2  e7b7              B        |L6.36|
                  |L6.180|
0000b4  4916              LDR      r1,|L6.272|
0000b6  1c89              ADDS     r1,r1,#2              ;177
0000b8  4812              LDR      r0,|L6.260|
0000ba  f7fffffe          BL       I2C_CheckEvent
0000be  2800              CMP      r0,#0                 ;177
0000c0  d0f2              BEQ      |L6.168|
0000c2  4639              MOV      r1,r7                 ;184
0000c4  480f              LDR      r0,|L6.260|
0000c6  f7fffffe          BL       I2C_SendData
0000ca  480d              LDR      r0,|L6.256|
0000cc  6805              LDR      r5,[r0,#0]            ;187  ; DCMI_TIMEOUT_MAX
0000ce  e005              B        |L6.220|
                  |L6.208|
0000d0  0028              MOVS     r0,r5                 ;191
0000d2  f1a50501          SUB      r5,r5,#1              ;191
0000d6  d101              BNE      |L6.220|
0000d8  20ff              MOVS     r0,#0xff              ;191
0000da  e7a3              B        |L6.36|
                  |L6.220|
0000dc  490c              LDR      r1,|L6.272|
0000de  1c89              ADDS     r1,r1,#2              ;188
0000e0  4808              LDR      r0,|L6.260|
0000e2  f7fffffe          BL       I2C_CheckEvent
0000e6  2800              CMP      r0,#0                 ;188
0000e8  d0f2              BEQ      |L6.208|
0000ea  2101              MOVS     r1,#1                 ;195
0000ec  4805              LDR      r0,|L6.260|
0000ee  f7fffffe          BL       I2C_GenerateSTOP
0000f2  2400              MOVS     r4,#0                 ;196
0000f4  e000              B        |L6.248|
                  |L6.246|
0000f6  1c64              ADDS     r4,r4,#1              ;196
                  |L6.248|
0000f8  2cff              CMP      r4,#0xff              ;196
0000fa  d3fc              BCC      |L6.246|
0000fc  2000              MOVS     r0,#0                 ;199
0000fe  e791              B        |L6.36|
;;;201    
                          ENDP

                  |L6.256|
                          DCD      DCMI_TIMEOUT_MAX
                  |L6.260|
                          DCD      0x40005800
                  |L6.264|
                          DCD      0x00030001
                  |L6.268|
                          DCD      sccbadd
                  |L6.272|
                          DCD      0x00070082

                          AREA ||.data||, DATA, ALIGN=2

                  DCMI_TIMEOUT_MAX
                          DCD      0x000186a0
                  sccbadd
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\SCCB.C"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_SCCB_C_efc3c097____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_SCCB_C_efc3c097____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_SCCB_C_efc3c097____REVSH|
#line 128
|__asm___6_SCCB_C_efc3c097____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
