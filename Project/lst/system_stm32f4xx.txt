; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\system_stm32f4xx.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\ST\STM32F4xx\Include -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSER_MSG_ENB -DWRITEIMAGEHEADER -DM16 -DSTM32F429_439xx --omf_browse=.\out\system_stm32f4xx.crf ..\src\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;346      */
;;;347    static void SetSysClock(void)
000000  4822              LDR      r0,|L1.140|
;;;348    {
;;;349    /******************************************************************************/
;;;350    /*            PLL (clocked by HSI) used as System clock source                */
;;;351    /******************************************************************************/
;;;352    
;;;353      /* At this stage the HSI is already enabled and used as System clock source */
;;;354    
;;;355        /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
;;;356        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000002  6800              LDR      r0,[r0,#0]
000004  f0405080          ORR      r0,r0,#0x10000000
000008  4920              LDR      r1,|L1.140|
00000a  6008              STR      r0,[r1,#0]
;;;357        PWR->CR |= PWR_CR_VOS;
00000c  4820              LDR      r0,|L1.144|
00000e  6800              LDR      r0,[r0,#0]
000010  f4404040          ORR      r0,r0,#0xc000
000014  491e              LDR      r1,|L1.144|
000016  6008              STR      r0,[r1,#0]
;;;358    
;;;359      /* HCLK = SYSCLK / 1*/
;;;360      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000018  481c              LDR      r0,|L1.140|
00001a  3838              SUBS     r0,r0,#0x38
00001c  6800              LDR      r0,[r0,#0]
00001e  491b              LDR      r1,|L1.140|
000020  3938              SUBS     r1,r1,#0x38
000022  6008              STR      r0,[r1,#0]
;;;361          
;;;362      /* PCLK2 = HCLK / 2*/
;;;363      RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4404000          ORR      r0,r0,#0x8000
00002c  6008              STR      r0,[r1,#0]
;;;364        
;;;365      /* PCLK1 = HCLK / 1*/
;;;366      RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]
000032  f44050a0          ORR      r0,r0,#0x1400
000036  6008              STR      r0,[r1,#0]
;;;367    
;;;368      /* Configure the main PLL */
;;;369      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000038  4816              LDR      r0,|L1.148|
00003a  1f09              SUBS     r1,r1,#4
00003c  6008              STR      r0,[r1,#0]
;;;370                     (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
;;;371    
;;;372      /* Enable the main PLL */
;;;373      RCC->CR |= RCC_CR_PLLON;
00003e  1f08              SUBS     r0,r1,#4
000040  6800              LDR      r0,[r0,#0]
000042  f0407080          ORR      r0,r0,#0x1000000
000046  1f09              SUBS     r1,r1,#4
000048  6008              STR      r0,[r1,#0]
;;;374    
;;;375      /* Wait till the main PLL is ready */
;;;376      while((RCC->CR & RCC_CR_PLLRDY) == 0)
00004a  bf00              NOP      
                  |L1.76|
00004c  480f              LDR      r0,|L1.140|
00004e  3840              SUBS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0107f00          TST      r0,#0x2000000
000056  d0f9              BEQ      |L1.76|
;;;377      {
;;;378      }
;;;379       
;;;380      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;381      FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
000058  f2406005          MOV      r0,#0x605
00005c  490e              LDR      r1,|L1.152|
00005e  6008              STR      r0,[r1,#0]
;;;382    
;;;383      /* Select the main PLL as system clock source */
;;;384      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000060  480a              LDR      r0,|L1.140|
000062  3838              SUBS     r0,r0,#0x38
000064  6800              LDR      r0,[r0,#0]
000066  f0200003          BIC      r0,r0,#3
00006a  4908              LDR      r1,|L1.140|
00006c  3938              SUBS     r1,r1,#0x38
00006e  6008              STR      r0,[r1,#0]
;;;385      RCC->CFGR |= RCC_CFGR_SW_PLL;
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0400002          ORR      r0,r0,#2
000078  6008              STR      r0,[r1,#0]
;;;386    
;;;387      /* Wait till the main PLL is used as system clock source */
;;;388      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
00007a  bf00              NOP      
                  |L1.124|
00007c  4803              LDR      r0,|L1.140|
00007e  3838              SUBS     r0,r0,#0x38
000080  6800              LDR      r0,[r0,#0]
000082  f000000c          AND      r0,r0,#0xc
000086  2808              CMP      r0,#8
000088  d1f8              BNE      |L1.124|
;;;389      {
;;;390      }
;;;391    }
00008a  4770              BX       lr
;;;392    
                          ENDP

                  |L1.140|
                          DCD      0x40023840
                  |L1.144|
                          DCD      0x40007000
                  |L1.148|
                          DCD      0x07005a10
                  |L1.152|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;290      */
;;;291    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;292    {
;;;293      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;294      
;;;295      /* Get SYSCLK source -------------------------------------------------------*/
;;;296      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;297    
;;;298      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;299      {
;;;300        case 0x00:  /* HSI used as system clock source */
;;;301          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;302          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;303        case 0x04:  /* HSE used as system clock source */
;;;304          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;305          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;306        case 0x08:  /* PLL used as system clock source */
;;;307    
;;;308          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;309             SYSCLK = PLL_VCO / PLL_P
;;;310             */    
;;;311          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;312          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;313          
;;;314          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;315          {
;;;316            /* HSE used as PLL clock source */
;;;317            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;318          }
;;;319          else
;;;320          {
;;;321            /* HSI used as PLL clock source */
;;;322            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;323          }
;;;324    
;;;325          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;326          SystemCoreClock = pllvco/pllp;
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;327          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;328        default:
;;;329          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;330          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;302
;;;331      }
;;;332      /* Compute HCLK frequency --------------------------------------------------*/
;;;333      /* Get HCLK prescaler */
;;;334      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;335      /* HCLK frequency */
;;;336      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;337    }
0000a8  bd70              POP      {r4-r6,pc}
;;;338    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x007a1200
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;213      */
;;;214    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;215    {
;;;216      /* FPU settings ------------------------------------------------------------*/
;;;217      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;218        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;219      #endif
;;;220      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;221      /* Set HSION bit */
;;;222      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* Reset CFGR register */
;;;225      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;226    
;;;227      /* Reset HSEON, CSSON and PLLON bits */
;;;228      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;229    
;;;230      /* Reset PLLCFGR register */
;;;231      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;232    
;;;233      /* Reset HSEBYP bit */
;;;234      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;235    
;;;236      /* Disable all interrupts */
;;;237      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;238    
;;;239    #ifdef DATA_IN_ExtSRAM
;;;240      SystemInit_ExtMemCtl(); 
;;;241    #endif /* DATA_IN_ExtSRAM */
;;;242             
;;;243      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;244         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;245      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;246    
;;;247      /* Configure the Vector Table location add offset address ------------------*/
;;;248    #ifdef VECT_TAB_SRAM
;;;249      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;250    #else
;;;251      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;252    #endif
;;;253    }
000056  bd10              POP      {r4,pc}
;;;254    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0aba9500
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f4xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
