; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\flash.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\ST\STM32F4xx\Include -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\inc -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F4XX -DUSER_MSG_ENB -DWRITEIMAGEHEADER -DM16 -DSTM32F429_439xx --omf_browse=.\out\flash.crf ..\src\flash.c]
                          THUMB

                          AREA ||i.FlashCloseFile||, CODE, READONLY, ALIGN=2

                  FlashCloseFile PROC
;;;486    }
;;;487    u8 FlashCloseFile(u8 handle, u32 seq)//have to close file on open to update file table
000000  b570              PUSH     {r4-r6,lr}
;;;488    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;489    	fe * fileinfo;	
;;;490    	Flash_Read(FTABLE_ADDRESS,(void*)&file_sys,sizeof(file_sys));//Read File System
000006  2250              MOVS     r2,#0x50
000008  490d              LDR      r1,|L1.64|
00000a  480e              LDR      r0,|L1.68|
00000c  f7fffffe          BL       Flash_Read
;;;491    	fileinfo = (fe *)&file_sys.ftable[handle*4];
000010  480b              LDR      r0,|L1.64|
000012  3010              ADDS     r0,r0,#0x10
000014  eb001405          ADD      r4,r0,r5,LSL #4
;;;492    	file_sys.header = 0x01ABCDEF;
000018  480b              LDR      r0,|L1.72|
00001a  4909              LDR      r1,|L1.64|
00001c  6008              STR      r0,[r1,#0]  ; file_sys
;;;493    	fileinfo->seq = seq;
00001e  60e6              STR      r6,[r4,#0xc]
;;;494    	fileinfo->sz =  FlashFileBytesWritten;
000020  480a              LDR      r0,|L1.76|
000022  6800              LDR      r0,[r0,#0]  ; FlashFileBytesWritten
000024  60a0              STR      r0,[r4,#8]
;;;495    	fileinfo->file_tag  = 'D';   //Mark as new file
000026  2044              MOVS     r0,#0x44
000028  6020              STR      r0,[r4,#0]
;;;496    	fileinfo->sof = ftb[handle]; //Update Start file address in flash from lookup tble
00002a  4809              LDR      r0,|L1.80|
00002c  f8500025          LDR      r0,[r0,r5,LSL #2]
000030  6060              STR      r0,[r4,#4]
;;;497    	Flash_Write(FTABLE_ADDRESS,(void*)&file_sys,sizeof(file_sys)); //write information to flash
000032  2250              MOVS     r2,#0x50
000034  4803              LDR      r0,|L1.68|
000036  f7fffffe          BL       Flash_Write
;;;498    ;
;;;499    	return 0;
00003a  2000              MOVS     r0,#0
;;;500    }
00003c  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      file_sys
                  |L1.68|
                          DCD      0x000ff200
                  |L1.72|
                          DCD      0x01abcdef
                  |L1.76|
                          DCD      FlashFileBytesWritten
                  |L1.80|
                          DCD      ||ftb||

                          AREA ||i.FlashCreateNewFile||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  FlashCreateNewFile PROC
;;;421    */
;;;422    u8 FlashCreateNewFile(u32* seq)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;423    {
000004  b08e              SUB      sp,sp,#0x38
000006  4607              MOV      r7,r0
;;;424    	u8 sb[50];
;;;425    	u8 i=0;
000008  2500              MOVS     r5,#0
;;;426    	u32 t;
;;;427    	fe * fileinfo;
;;;428    	u32 lfno;
;;;429    	u32 lseqno=0;
00000a  46a9              MOV      r9,r5
;;;430    	u32 hseqno=0;
00000c  46a8              MOV      r8,r5
;;;431    
;;;432    	s32 add1, add2;
;;;433    	
;;;434    	Flash_Read(FTABLE_ADDRESS,(void*)&file_sys,sizeof(file_sys));//Read File System
00000e  2250              MOVS     r2,#0x50
000010  493d              LDR      r1,|L2.264|
000012  483e              LDR      r0,|L2.268|
000014  f7fffffe          BL       Flash_Read
;;;435    	
;;;436    	if ( file_sys.header  != 0x01ABCDEF)
000018  483b              LDR      r0,|L2.264|
00001a  6800              LDR      r0,[r0,#0]  ; file_sys
00001c  493c              LDR      r1,|L2.272|
00001e  4288              CMP      r0,r1
000020  d00a              BEQ      |L2.56|
;;;437    	{
;;;438    		SerComSendMessageUser("File System Corrupt, Creating New\r\n");
000022  a03c              ADR      r0,|L2.276|
000024  f7fffffe          BL       SerComSendMessageUser
;;;439    		Flash_Create_FS();
000028  f7fffffe          BL       Flash_Create_FS
;;;440    		*seq = 1;
00002c  2001              MOVS     r0,#1
00002e  6038              STR      r0,[r7,#0]
;;;441    		return 0;
000030  2000              MOVS     r0,#0
                  |L2.50|
;;;442    	}
;;;443    	//Search for a file to write to
;;;444    	fileinfo = (fe *)&file_sys.ftable[0];
;;;445    	lfno = 0;
;;;446    	lseqno = fileinfo->seq;
;;;447    	hseqno = lseqno;
;;;448    	
;;;449    	for(i = 1; i<FTB_FILES_TOTAL;i++)
;;;450    	{
;;;451    		fileinfo = (fe *)&file_sys.ftable[i*4];
;;;452    		
;;;453    		if( lseqno > fileinfo->seq)
;;;454    		{
;;;455    			lseqno = fileinfo->seq;	//Store lowest seqno
;;;456    			lfno   = i;				//Store file no for the lowest seqno
;;;457    		}
;;;458    		if(fileinfo->seq > hseqno)
;;;459    		{
;;;460    			hseqno = fileinfo->seq; //Store highest seqno
;;;461    		}
;;;462    	}
;;;463    	fileinfo = (fe *)&file_sys.ftable[lfno];
;;;464    	SerComSendMessageUser("NEW FILE LOCATION:");
;;;465    	sprintf(sb," %d ",lfno);
;;;466    	SerComSendMessageUser(sb);
;;;467    	SerComSendMessageUser("NEW SEQNO:");
;;;468    	sprintf(sb," %d ",hseqno+1);
;;;469    	SerComSendMessageUser(sb);
;;;470    	
;;;471    	*seq = hseqno + 1;
;;;472    	
;;;473    	SerComSendMessageUser("Erasing Sector Address:");
;;;474    	t = Flash_convert_addr(fileinfo->sof + 0*(BYTES_PER_SECTOR),512);
;;;475    	sprintf(sb," %d\r\n",t);
;;;476    	SerComSendMessageUser(sb);
;;;477    	Flash_Sector_Erase(t);
;;;478    	SerComSendMessageUser("Erasing Sector Address:");
;;;479    	t = Flash_convert_addr(fileinfo->sof + 1*(BYTES_PER_SECTOR),512);
;;;480    	sprintf(sb," %d\r\n",t);
;;;481    	SerComSendMessageUser(sb);
;;;482    	Flash_Sector_Erase(t);
;;;483    	FlashFileBytesWritten = 0;
;;;484    	return lfno;//return file handle
;;;485    
;;;486    }
000032  b00e              ADD      sp,sp,#0x38
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L2.56|
000038  4c33              LDR      r4,|L2.264|
00003a  3410              ADDS     r4,r4,#0x10           ;444
00003c  2600              MOVS     r6,#0                 ;445
00003e  f8d4900c          LDR      r9,[r4,#0xc]          ;446
000042  46c8              MOV      r8,r9                 ;447
000044  2501              MOVS     r5,#1                 ;449
000046  e010              B        |L2.106|
                  |L2.72|
000048  482f              LDR      r0,|L2.264|
00004a  3010              ADDS     r0,r0,#0x10           ;451
00004c  eb001405          ADD      r4,r0,r5,LSL #4       ;451
000050  68e0              LDR      r0,[r4,#0xc]          ;453
000052  4548              CMP      r0,r9                 ;453
000054  d202              BCS      |L2.92|
000056  f8d4900c          LDR      r9,[r4,#0xc]          ;455
00005a  462e              MOV      r6,r5                 ;456
                  |L2.92|
00005c  68e0              LDR      r0,[r4,#0xc]          ;458
00005e  4540              CMP      r0,r8                 ;458
000060  d901              BLS      |L2.102|
000062  f8d4800c          LDR      r8,[r4,#0xc]          ;460
                  |L2.102|
000066  1c68              ADDS     r0,r5,#1              ;449
000068  b2c5              UXTB     r5,r0                 ;449
                  |L2.106|
00006a  2d04              CMP      r5,#4                 ;449
00006c  dbec              BLT      |L2.72|
00006e  4826              LDR      r0,|L2.264|
000070  3010              ADDS     r0,r0,#0x10           ;463
000072  eb000486          ADD      r4,r0,r6,LSL #2       ;463
000076  a030              ADR      r0,|L2.312|
000078  f7fffffe          BL       SerComSendMessageUser
00007c  4632              MOV      r2,r6                 ;465
00007e  a133              ADR      r1,|L2.332|
000080  a801              ADD      r0,sp,#4              ;465
000082  f7fffffe          BL       __2sprintf
000086  a801              ADD      r0,sp,#4              ;466
000088  f7fffffe          BL       SerComSendMessageUser
00008c  a031              ADR      r0,|L2.340|
00008e  f7fffffe          BL       SerComSendMessageUser
000092  f1080201          ADD      r2,r8,#1              ;468
000096  a12d              ADR      r1,|L2.332|
000098  a801              ADD      r0,sp,#4              ;468
00009a  f7fffffe          BL       __2sprintf
00009e  a801              ADD      r0,sp,#4              ;469
0000a0  f7fffffe          BL       SerComSendMessageUser
0000a4  f1080001          ADD      r0,r8,#1              ;471
0000a8  6038              STR      r0,[r7,#0]            ;471
0000aa  a02d              ADR      r0,|L2.352|
0000ac  f7fffffe          BL       SerComSendMessageUser
0000b0  f44f7100          MOV      r1,#0x200             ;474
0000b4  6860              LDR      r0,[r4,#4]            ;474
0000b6  f7fffffe          BL       Flash_convert_addr
0000ba  4682              MOV      r10,r0                ;474
0000bc  4652              MOV      r2,r10                ;475
0000be  a12e              ADR      r1,|L2.376|
0000c0  a801              ADD      r0,sp,#4              ;475
0000c2  f7fffffe          BL       __2sprintf
0000c6  a801              ADD      r0,sp,#4              ;476
0000c8  f7fffffe          BL       SerComSendMessageUser
0000cc  4650              MOV      r0,r10                ;477
0000ce  f7fffffe          BL       Flash_Sector_Erase
0000d2  a023              ADR      r0,|L2.352|
0000d4  f7fffffe          BL       SerComSendMessageUser
0000d8  6861              LDR      r1,[r4,#4]            ;479
0000da  f5013000          ADD      r0,r1,#0x20000        ;479
0000de  f44f7100          MOV      r1,#0x200             ;479
0000e2  f7fffffe          BL       Flash_convert_addr
0000e6  4682              MOV      r10,r0                ;479
0000e8  4652              MOV      r2,r10                ;480
0000ea  a123              ADR      r1,|L2.376|
0000ec  a801              ADD      r0,sp,#4              ;480
0000ee  f7fffffe          BL       __2sprintf
0000f2  a801              ADD      r0,sp,#4              ;481
0000f4  f7fffffe          BL       SerComSendMessageUser
0000f8  4650              MOV      r0,r10                ;482
0000fa  f7fffffe          BL       Flash_Sector_Erase
0000fe  2000              MOVS     r0,#0                 ;483
000100  491f              LDR      r1,|L2.384|
000102  6008              STR      r0,[r1,#0]            ;483  ; FlashFileBytesWritten
000104  b2f0              UXTB     r0,r6                 ;484
000106  e794              B        |L2.50|
;;;487    u8 FlashCloseFile(u8 handle, u32 seq)//have to close file on open to update file table
                          ENDP

                  |L2.264|
                          DCD      file_sys
                  |L2.268|
                          DCD      0x000ff200
                  |L2.272|
                          DCD      0x01abcdef
                  |L2.276|
000114  46696c65          DCB      "File System Corrupt, Creating New\r\n",0
000118  20537973
00011c  74656d20
000120  436f7272
000124  7570742c
000128  20437265
00012c  6174696e
000130  67204e65
000134  770d0a00
                  |L2.312|
000138  4e455720          DCB      "NEW FILE LOCATION:",0
00013c  46494c45
000140  204c4f43
000144  4154494f
000148  4e3a00  
00014b  00                DCB      0
                  |L2.332|
00014c  20256420          DCB      " %d ",0
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L2.340|
000154  4e455720          DCB      "NEW SEQNO:",0
000158  5345514e
00015c  4f3a00  
00015f  00                DCB      0
                  |L2.352|
000160  45726173          DCB      "Erasing Sector Address:",0
000164  696e6720
000168  53656374
00016c  6f722041
000170  64647265
000174  73733a00
                  |L2.376|
000178  2025640d          DCB      " %d\r\n",0
00017c  0a00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L2.384|
                          DCD      FlashFileBytesWritten

                          AREA ||i.FlashFileWrite||, CODE, READONLY, ALIGN=2

                  FlashFileWrite PROC
;;;501    
;;;502    u32 FlashFileWrite(u32 offset,u8 handle, u8*data, u32 n)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;503    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461d              MOV      r5,r3
;;;504    	u32 i=0,sz;
00000c  2400              MOVS     r4,#0
;;;505    	u32 fa;
;;;506    	
;;;507    	fa = ftb[handle];//Get the start of flash address to write from the lookup table
00000e  4810              LDR      r0,|L3.80|
000010  f850a028          LDR      r10,[r0,r8,LSL #2]
;;;508    	
;;;509    	while(i < n)
000014  e016              B        |L3.68|
                  |L3.22|
;;;510    	{
;;;511    		sz = n-i;
000016  1b2e              SUBS     r6,r5,r4
;;;512    		if(sz > WORKING_PAGE_SZ)
000018  f5b67f00          CMP      r6,#0x200
00001c  d902              BLS      |L3.36|
;;;513    			sz = WORKING_PAGE_SZ; //write pagewise ie 512 bytes at a time to avoid overwrite
00001e  f44f7600          MOV      r6,#0x200
000022  e000              B        |L3.38|
                  |L3.36|
;;;514    		else
;;;515    			sz= sz;
000024  bf00              NOP      
                  |L3.38|
;;;516    		
;;;517    
;;;518    		
;;;519        //Flash_Write(Flash_convert_addr(fa + i + offset,WORKING_PAGE_SZ),data+i,sz);
;;;520    		Flash_wr_mem(data+i,Flash_convert_addr(fa + i + offset,WORKING_PAGE_SZ),sz);//Write data to Flash
000026  eb0a0104          ADD      r1,r10,r4
00002a  19c8              ADDS     r0,r1,r7
00002c  f44f7100          MOV      r1,#0x200
000030  f7fffffe          BL       Flash_convert_addr
000034  4683              MOV      r11,r0
000036  b2b2              UXTH     r2,r6
000038  eb090004          ADD      r0,r9,r4
00003c  4659              MOV      r1,r11
00003e  f7fffffe          BL       Flash_wr_mem
;;;521    		i  += sz;			
000042  4434              ADD      r4,r4,r6
                  |L3.68|
000044  42ac              CMP      r4,r5                 ;509
000046  d3e6              BCC      |L3.22|
;;;522    	}
;;;523    	return n;//return total bytes written,in this case always equal to the bytes to be written passed as an argument
000048  4628              MOV      r0,r5
;;;524    }	
00004a  e8bd9ff0          POP      {r4-r12,pc}
;;;525    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ||ftb||

                          AREA ||i.Flash_Configure_Pagesz||, CODE, READONLY, ALIGN=2

                  Flash_Configure_Pagesz PROC
;;;243    
;;;244    u8 Flash_Configure_Pagesz(u32 pagesz)
000000  b510              PUSH     {r4,lr}
;;;245    {
000002  4604              MOV      r4,r0
;;;246    	if(pagesz == BINARY)
000004  2c01              CMP      r4,#1
000006  d116              BNE      |L4.54|
;;;247    	{
;;;248    		CS_LOW();
000008  2110              MOVS     r1,#0x10
00000a  4819              LDR      r0,|L4.112|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;249    		Flash_Spi_TxRx(0x3d);
000010  203d              MOVS     r0,#0x3d
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;250    		Flash_Spi_TxRx(0x2a);
000016  202a              MOVS     r0,#0x2a
000018  f7fffffe          BL       Flash_Spi_TxRx
;;;251    		Flash_Spi_TxRx(0x80);
00001c  2080              MOVS     r0,#0x80
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;252    		Flash_Spi_TxRx(0xa6);
000022  20a6              MOVS     r0,#0xa6
000024  f7fffffe          BL       Flash_Spi_TxRx
;;;253    		CS_HIGH();
000028  2110              MOVS     r1,#0x10
00002a  4811              LDR      r0,|L4.112|
00002c  f7fffffe          BL       GPIO_SetBits
;;;254    		Flash_wait_busy();
000030  f7fffffe          BL       Flash_wait_busy
000034  e019              B        |L4.106|
                  |L4.54|
;;;255    	}
;;;256    	else if(pagesz == NON_BINARY)
000036  b9b4              CBNZ     r4,|L4.102|
;;;257    	{
;;;258    		CS_LOW();
000038  2110              MOVS     r1,#0x10
00003a  480d              LDR      r0,|L4.112|
00003c  f7fffffe          BL       GPIO_ResetBits
;;;259    		Flash_Spi_TxRx(0x3d);
000040  203d              MOVS     r0,#0x3d
000042  f7fffffe          BL       Flash_Spi_TxRx
;;;260    		Flash_Spi_TxRx(0x2a);
000046  202a              MOVS     r0,#0x2a
000048  f7fffffe          BL       Flash_Spi_TxRx
;;;261    		Flash_Spi_TxRx(0x80);
00004c  2080              MOVS     r0,#0x80
00004e  f7fffffe          BL       Flash_Spi_TxRx
;;;262    		Flash_Spi_TxRx(0xa7);
000052  20a7              MOVS     r0,#0xa7
000054  f7fffffe          BL       Flash_Spi_TxRx
;;;263    		CS_HIGH();
000058  2110              MOVS     r1,#0x10
00005a  4805              LDR      r0,|L4.112|
00005c  f7fffffe          BL       GPIO_SetBits
;;;264    		Flash_wait_busy();
000060  f7fffffe          BL       Flash_wait_busy
000064  e001              B        |L4.106|
                  |L4.102|
;;;265    	}
;;;266    	else
;;;267    	{
;;;268    			return 0;
000066  2000              MOVS     r0,#0
                  |L4.104|
;;;269    	}
;;;270    	
;;;271    	return 1;
;;;272    }
000068  bd10              POP      {r4,pc}
                  |L4.106|
00006a  2001              MOVS     r0,#1                 ;271
00006c  e7fc              B        |L4.104|
;;;273    /*
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
                          DCD      0x40021000

                          AREA ||i.Flash_Create_FS||, CODE, READONLY, ALIGN=2

                  Flash_Create_FS PROC
;;;628    
;;;629    void Flash_Create_FS(void)
000000  b570              PUSH     {r4-r6,lr}
;;;630    {
;;;631    	u8 i;
;;;632    	fe * fileinfo;
;;;633    	
;;;634    	SerComSendMessageUser("Creating New Tables\r\n");
000002  a013              ADR      r0,|L5.80|
000004  f7fffffe          BL       SerComSendMessageUser
;;;635    	
;;;636    	file_sys.header = 0x01ABCDEF;
000008  4817              LDR      r0,|L5.104|
00000a  4918              LDR      r1,|L5.108|
00000c  6008              STR      r0,[r1,#0]  ; file_sys
;;;637    	file_sys.max_fno = FTB_FILES_TOTAL;
00000e  2004              MOVS     r0,#4
000010  6088              STR      r0,[r1,#8]  ; file_sys
;;;638    	file_sys.max_sz = MAX_FILE_ENTRY;
000012  0400              LSLS     r0,r0,#16
000014  6048              STR      r0,[r1,#4]  ; file_sys
;;;639    	
;;;640    	for(i = 0; i<FTB_FILES_TOTAL;i++)
000016  2500              MOVS     r5,#0
000018  e00f              B        |L5.58|
                  |L5.26|
;;;641    	{
;;;642    		fileinfo = (fe *)&file_sys.ftable[i*4];
00001a  4814              LDR      r0,|L5.108|
00001c  3010              ADDS     r0,r0,#0x10
00001e  eb001405          ADD      r4,r0,r5,LSL #4
;;;643    		fileinfo->file_tag = 'E';
000022  2045              MOVS     r0,#0x45
000024  6020              STR      r0,[r4,#0]
;;;644    		fileinfo->seq = 0;
000026  2000              MOVS     r0,#0
000028  60e0              STR      r0,[r4,#0xc]
;;;645    		fileinfo->sof = ftb[i];
00002a  4811              LDR      r0,|L5.112|
00002c  f8500025          LDR      r0,[r0,r5,LSL #2]
000030  6060              STR      r0,[r4,#4]
;;;646    		fileinfo->sz = 0;
000032  2000              MOVS     r0,#0
000034  60a0              STR      r0,[r4,#8]
000036  1c68              ADDS     r0,r5,#1              ;640
000038  b2c5              UXTB     r5,r0                 ;640
                  |L5.58|
00003a  2d04              CMP      r5,#4                 ;640
00003c  dbed              BLT      |L5.26|
;;;647    	}
;;;648    	SerComSendMessageUser("Writing to Flash\r\n");
00003e  a00d              ADR      r0,|L5.116|
000040  f7fffffe          BL       SerComSendMessageUser
;;;649    	Flash_Write(FTABLE_ADDRESS,(void*)&file_sys,sizeof(file_sys));
000044  2250              MOVS     r2,#0x50
000046  4909              LDR      r1,|L5.108|
000048  480f              LDR      r0,|L5.136|
00004a  f7fffffe          BL       Flash_Write
;;;650    }
00004e  bd70              POP      {r4-r6,pc}
;;;651    
                          ENDP

                  |L5.80|
000050  43726561          DCB      "Creating New Tables\r\n",0
000054  74696e67
000058  204e6577
00005c  20546162
000060  6c65730d
000064  0a00    
000066  00                DCB      0
000067  00                DCB      0
                  |L5.104|
                          DCD      0x01abcdef
                  |L5.108|
                          DCD      file_sys
                  |L5.112|
                          DCD      ||ftb||
                  |L5.116|
000074  57726974          DCB      "Writing to Flash\r\n",0
000078  696e6720
00007c  746f2046
000080  6c617368
000084  0d0a00  
000087  00                DCB      0
                  |L5.136|
                          DCD      0x000ff200

                          AREA ||i.Flash_Dump_filetable||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Flash_Dump_filetable PROC
;;;575    }
;;;576    void Flash_Dump_filetable(void)
000000  b530              PUSH     {r4,r5,lr}
;;;577    {
000002  b08d              SUB      sp,sp,#0x34
;;;578    	u8 i;
;;;579    	fe * fileinfo;
;;;580    	u8 sb[50];
;;;581    	
;;;582    	Flash_Read(FTABLE_ADDRESS,(void*)&file_sys,sizeof(file_sys));
000004  2250              MOVS     r2,#0x50
000006  493d              LDR      r1,|L6.252|
000008  483d              LDR      r0,|L6.256|
00000a  f7fffffe          BL       Flash_Read
;;;583    
;;;584    	SerComSendMessageUser("HEADER:");
00000e  a03d              ADR      r0,|L6.260|
000010  f7fffffe          BL       SerComSendMessageUser
;;;585    	sprintf(sb," %X ",file_sys.header);
000014  4839              LDR      r0,|L6.252|
000016  a13d              ADR      r1,|L6.268|
000018  6802              LDR      r2,[r0,#0]  ; file_sys
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       __2sprintf
;;;586    	SerComSendMessageUser(sb);
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       SerComSendMessageUser
;;;587    	
;;;588    	SerComSendMessageUser("MAX_FILES:");
000026  a03b              ADR      r0,|L6.276|
000028  f7fffffe          BL       SerComSendMessageUser
;;;589    	sprintf(sb," %d ",file_sys.max_fno);
00002c  4833              LDR      r0,|L6.252|
00002e  a13c              ADR      r1,|L6.288|
000030  6882              LDR      r2,[r0,#8]  ; file_sys
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       __2sprintf
;;;590    	SerComSendMessageUser(sb);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       SerComSendMessageUser
;;;591    	
;;;592    	SerComSendMessageUser("MAX_FILE_SIZE:");
00003e  a03a              ADR      r0,|L6.296|
000040  f7fffffe          BL       SerComSendMessageUser
;;;593    	sprintf(sb," %d ",file_sys.max_sz);
000044  482d              LDR      r0,|L6.252|
000046  a136              ADR      r1,|L6.288|
000048  6842              LDR      r2,[r0,#4]  ; file_sys
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       __2sprintf
;;;594    	SerComSendMessageUser(sb);
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       SerComSendMessageUser
;;;595    	
;;;596    	SerComSendMessageUser("\r\nFILE TABLE:\r\n");
000056  a038              ADR      r0,|L6.312|
000058  f7fffffe          BL       SerComSendMessageUser
;;;597    	for(i = 0; i<FTB_FILES_TOTAL;i++)
00005c  2400              MOVS     r4,#0
00005e  e034              B        |L6.202|
                  |L6.96|
;;;598    	{
;;;599    		fileinfo = (fe *)&file_sys.ftable[i*4];
000060  4826              LDR      r0,|L6.252|
000062  3010              ADDS     r0,r0,#0x10
000064  eb001504          ADD      r5,r0,r4,LSL #4
;;;600    			
;;;601    		SerComSendMessageUser("FILE TAG:");
000068  a037              ADR      r0,|L6.328|
00006a  f7fffffe          BL       SerComSendMessageUser
;;;602    		sprintf(sb," %x ",fileinfo->file_tag);
00006e  a139              ADR      r1,|L6.340|
000070  4668              MOV      r0,sp
000072  682a              LDR      r2,[r5,#0]
000074  f7fffffe          BL       __2sprintf
;;;603    		SerComSendMessageUser(sb);
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       SerComSendMessageUser
;;;604    		
;;;605    		SerComSendMessageUser("FILE SEQ:");
00007e  a037              ADR      r0,|L6.348|
000080  f7fffffe          BL       SerComSendMessageUser
;;;606    		sprintf(sb," %d ",fileinfo->seq);
000084  a126              ADR      r1,|L6.288|
000086  4668              MOV      r0,sp
000088  68ea              LDR      r2,[r5,#0xc]
00008a  f7fffffe          BL       __2sprintf
;;;607    		SerComSendMessageUser(sb);
00008e  4668              MOV      r0,sp
000090  f7fffffe          BL       SerComSendMessageUser
;;;608    		
;;;609    		SerComSendMessageUser("FILE ADDRESS:");
000094  a034              ADR      r0,|L6.360|
000096  f7fffffe          BL       SerComSendMessageUser
;;;610    		sprintf(sb," %d ",fileinfo->sof);
00009a  a121              ADR      r1,|L6.288|
00009c  4668              MOV      r0,sp
00009e  686a              LDR      r2,[r5,#4]
0000a0  f7fffffe          BL       __2sprintf
;;;611    		SerComSendMessageUser(sb);
0000a4  4668              MOV      r0,sp
0000a6  f7fffffe          BL       SerComSendMessageUser
;;;612    		
;;;613    		SerComSendMessageUser("FILE SIZE:");
0000aa  a033              ADR      r0,|L6.376|
0000ac  f7fffffe          BL       SerComSendMessageUser
;;;614    		sprintf(sb," %d ",fileinfo->sz);
0000b0  a11b              ADR      r1,|L6.288|
0000b2  4668              MOV      r0,sp
0000b4  68aa              LDR      r2,[r5,#8]
0000b6  f7fffffe          BL       __2sprintf
;;;615    		SerComSendMessageUser(sb);
0000ba  4668              MOV      r0,sp
0000bc  f7fffffe          BL       SerComSendMessageUser
;;;616    		
;;;617    		SerComSendMessageUser("\r\n");
0000c0  a030              ADR      r0,|L6.388|
0000c2  f7fffffe          BL       SerComSendMessageUser
0000c6  1c60              ADDS     r0,r4,#1              ;597
0000c8  b2c4              UXTB     r4,r0                 ;597
                  |L6.202|
0000ca  2c04              CMP      r4,#4                 ;597
0000cc  dbc8              BLT      |L6.96|
;;;618    	}
;;;619    			SerComSendMessageUser("SR #:");
0000ce  a02e              ADR      r0,|L6.392|
0000d0  f7fffffe          BL       SerComSendMessageUser
;;;620    	         for( i=0;i<18;i++)
0000d4  2400              MOVS     r4,#0
0000d6  e00a              B        |L6.238|
                  |L6.216|
;;;621    			{
;;;622    				sprintf(sb," %x ",imgdebug.device_serial[i]);
0000d8  482d              LDR      r0,|L6.400|
0000da  5d02              LDRB     r2,[r0,r4]
0000dc  a11d              ADR      r1,|L6.340|
0000de  4668              MOV      r0,sp
0000e0  f7fffffe          BL       __2sprintf
;;;623    				SerComSendMessageUser(sb);
0000e4  4668              MOV      r0,sp
0000e6  f7fffffe          BL       SerComSendMessageUser
0000ea  1c60              ADDS     r0,r4,#1              ;620
0000ec  b2c4              UXTB     r4,r0                 ;620
                  |L6.238|
0000ee  2c12              CMP      r4,#0x12              ;620
0000f0  dbf2              BLT      |L6.216|
;;;624    			}
;;;625    	
;;;626    	SerComSendMessageUser("\r\n");	
0000f2  a024              ADR      r0,|L6.388|
0000f4  f7fffffe          BL       SerComSendMessageUser
;;;627    }
0000f8  b00d              ADD      sp,sp,#0x34
0000fa  bd30              POP      {r4,r5,pc}
;;;628    
                          ENDP

                  |L6.252|
                          DCD      file_sys
                  |L6.256|
                          DCD      0x000ff200
                  |L6.260|
000104  48454144          DCB      "HEADER:",0
000108  45523a00
                  |L6.268|
00010c  20255820          DCB      " %X ",0
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L6.276|
000114  4d41585f          DCB      "MAX_FILES:",0
000118  46494c45
00011c  533a00  
00011f  00                DCB      0
                  |L6.288|
000120  20256420          DCB      " %d ",0
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L6.296|
000128  4d41585f          DCB      "MAX_FILE_SIZE:",0
00012c  46494c45
000130  5f53495a
000134  453a00  
000137  00                DCB      0
                  |L6.312|
000138  0d0a4649          DCB      "\r\nFILE TABLE:\r\n",0
00013c  4c452054
000140  41424c45
000144  3a0d0a00
                  |L6.328|
000148  46494c45          DCB      "FILE TAG:",0
00014c  20544147
000150  3a00    
000152  00                DCB      0
000153  00                DCB      0
                  |L6.340|
000154  20257820          DCB      " %x ",0
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L6.348|
00015c  46494c45          DCB      "FILE SEQ:",0
000160  20534551
000164  3a00    
000166  00                DCB      0
000167  00                DCB      0
                  |L6.360|
000168  46494c45          DCB      "FILE ADDRESS:",0
00016c  20414444
000170  52455353
000174  3a00    
000176  00                DCB      0
000177  00                DCB      0
                  |L6.376|
000178  46494c45          DCB      "FILE SIZE:",0
00017c  2053495a
000180  453a00  
000183  00                DCB      0
                  |L6.388|
000184  0d0a00            DCB      "\r\n",0
000187  00                DCB      0
                  |L6.392|
000188  53522023          DCB      "SR #:",0
00018c  3a00    
00018e  00                DCB      0
00018f  00                DCB      0
                  |L6.400|
                          DCD      imgdebug+0x18

                          AREA ||i.Flash_Init_SPI||, CODE, READONLY, ALIGN=2

                  Flash_Init_SPI PROC
;;;855    
;;;856    u8 Flash_Init_SPI(void){
000000  b500              PUSH     {lr}
000002  b087              SUB      sp,sp,#0x1c
;;;857    	
;;;858    	GPIO_InitTypeDef GPIO_InitStruct;
;;;859    	SPI_InitTypeDef SPI_InitStruct;
;;;860    	
;;;861    	// enable clock for used IO pins
;;;862    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;863    	
;;;864    	/* configure pins used by SPI1
;;;865    	 * PE2 = SCK
;;;866    	 * PE5 = MISO
;;;867    	 * PE6 = MOSI
;;;868    	 */
;;;869    	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_5 | GPIO_Pin_6;
00000c  2064              MOVS     r0,#0x64
00000e  9005              STR      r0,[sp,#0x14]
;;;870    	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
000010  2002              MOVS     r0,#2
000012  f88d0018          STRB     r0,[sp,#0x18]
;;;871    	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
000016  2000              MOVS     r0,#0
000018  f88d001a          STRB     r0,[sp,#0x1a]
;;;872    	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0019          STRB     r0,[sp,#0x19]
;;;873    	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;//GPIO_PuPd_NOPULL;
000022  2001              MOVS     r0,#1
000024  f88d001b          STRB     r0,[sp,#0x1b]
;;;874    	GPIO_Init(GPIOE, &GPIO_InitStruct);
000028  a905              ADD      r1,sp,#0x14
00002a  482c              LDR      r0,|L7.220|
00002c  f7fffffe          BL       GPIO_Init
;;;875    	
;;;876    	// connect SPI1 pins to SPI alternate function
;;;877    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource2, GPIO_AF_SPI4);
000030  2205              MOVS     r2,#5
000032  2102              MOVS     r1,#2
000034  4829              LDR      r0,|L7.220|
000036  f7fffffe          BL       GPIO_PinAFConfig
;;;878    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource5, GPIO_AF_SPI4);
00003a  2205              MOVS     r2,#5
00003c  4611              MOV      r1,r2
00003e  4827              LDR      r0,|L7.220|
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;879    	GPIO_PinAFConfig(GPIOE, GPIO_PinSource6, GPIO_AF_SPI4);
000044  2205              MOVS     r2,#5
000046  2106              MOVS     r1,#6
000048  4824              LDR      r0,|L7.220|
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;880    	
;;;881    	// enable clock for used IO pins
;;;882    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
00004e  2101              MOVS     r1,#1
000050  2010              MOVS     r0,#0x10
000052  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;883    	
;;;884    	/* Configure the chip select pin
;;;885    	   in this case we will use PE4 */
;;;886    	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
000056  2010              MOVS     r0,#0x10
000058  9005              STR      r0,[sp,#0x14]
;;;887    	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
00005a  2001              MOVS     r0,#1
00005c  f88d0018          STRB     r0,[sp,#0x18]
;;;888    	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
000060  2000              MOVS     r0,#0
000062  f88d001a          STRB     r0,[sp,#0x1a]
;;;889    	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
000066  2003              MOVS     r0,#3
000068  f88d0019          STRB     r0,[sp,#0x19]
;;;890    	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
00006c  2001              MOVS     r0,#1
00006e  f88d001b          STRB     r0,[sp,#0x1b]
;;;891    	GPIO_Init(GPIOE, &GPIO_InitStruct);
000072  a905              ADD      r1,sp,#0x14
000074  4819              LDR      r0,|L7.220|
000076  f7fffffe          BL       GPIO_Init
;;;892    	
;;;893    	GPIOB->BSRRL |= GPIO_Pin_4; // set PE7 high
00007a  4819              LDR      r0,|L7.224|
00007c  8800              LDRH     r0,[r0,#0]
00007e  f0400010          ORR      r0,r0,#0x10
000082  4917              LDR      r1,|L7.224|
000084  8008              STRH     r0,[r1,#0]
;;;894    	
;;;895    	// enable peripheral clock
;;;896    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI4, ENABLE);
000086  2101              MOVS     r1,#1
000088  0348              LSLS     r0,r1,#13
00008a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;897    	
;;;898    	/* configure SPI1 in Mode 0 
;;;899    	 * CPOL = 0 --> clock is low when idle
;;;900    	 * CPHA = 0 --> data is sampled at the first edge
;;;901    	 */
;;;902    	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
00008e  2000              MOVS     r0,#0
000090  f8ad0000          STRH     r0,[sp,#0]
;;;903    	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
000094  f44f7082          MOV      r0,#0x104
000098  f8ad0002          STRH     r0,[sp,#2]
;;;904    	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
00009c  2000              MOVS     r0,#0
00009e  f8ad0004          STRH     r0,[sp,#4]
;;;905    	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
0000a2  f8ad0006          STRH     r0,[sp,#6]
;;;906    	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at first edge
0000a6  f8ad0008          STRH     r0,[sp,#8]
;;;907    //	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
;;;908    	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
0000aa  f44f7000          MOV      r0,#0x200
0000ae  f8ad000a          STRH     r0,[sp,#0xa]
;;;909    	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256; // SPI frequency is APB2 frequency / 4
0000b2  2038              MOVS     r0,#0x38
0000b4  f8ad000c          STRH     r0,[sp,#0xc]
;;;910    	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
0000b8  2000              MOVS     r0,#0
0000ba  f8ad000e          STRH     r0,[sp,#0xe]
;;;911    	SPI_Init(SPI4, &SPI_InitStruct); 
0000be  4669              MOV      r1,sp
0000c0  4808              LDR      r0,|L7.228|
0000c2  f7fffffe          BL       SPI_Init
;;;912    	
;;;913    	SPI_Cmd(SPI4, ENABLE); // enable SPI1
0000c6  2101              MOVS     r1,#1
0000c8  4806              LDR      r0,|L7.228|
0000ca  f7fffffe          BL       SPI_Cmd
;;;914    	Delayms(50);
0000ce  2032              MOVS     r0,#0x32
0000d0  f7fffffe          BL       Delayms
;;;915    		
;;;916    	return Flash_init();
0000d4  f7fffffe          BL       Flash_init
;;;917    	
;;;918    }
0000d8  b007              ADD      sp,sp,#0x1c
0000da  bd00              POP      {pc}
;;;919    
                          ENDP

                  |L7.220|
                          DCD      0x40021000
                  |L7.224|
                          DCD      0x40020418
                  |L7.228|
                          DCD      0x40013400

                          AREA ||i.Flash_Read||, CODE, READONLY, ALIGN=2

                  Flash_Read PROC
;;;557    
;;;558    u8 Flash_Read(u32 fa,u8 * arr , u32 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;559    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;560    	u32 i=0;
00000a  f04f0800          MOV      r8,#0
;;;561    	u32 add = Flash_convert_addr(fa,WORKING_PAGE_SZ);
00000e  f44f7100          MOV      r1,#0x200
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       Flash_convert_addr
000018  4605              MOV      r5,r0
;;;562    	CS_LOW();
00001a  2110              MOVS     r1,#0x10
00001c  4813              LDR      r0,|L8.108|
00001e  f7fffffe          BL       GPIO_ResetBits
;;;563    	Flash_Spi_TxRx(FLASH_OP_ARR_READ_HF);
000022  200b              MOVS     r0,#0xb
000024  f7fffffe          BL       Flash_Spi_TxRx
;;;564    	Flash_Spi_TxRx((add >> 16)&0xff);
000028  f3c54007          UBFX     r0,r5,#16,#8
00002c  f7fffffe          BL       Flash_Spi_TxRx
;;;565    	Flash_Spi_TxRx((add >> 8)&0xff);
000030  f3c52007          UBFX     r0,r5,#8,#8
000034  f7fffffe          BL       Flash_Spi_TxRx
;;;566    	Flash_Spi_TxRx((add >> 0)&0xff);
000038  b2e8              UXTB     r0,r5
00003a  f7fffffe          BL       Flash_Spi_TxRx
;;;567    	Flash_Spi_TxRx(DUMMY_BYTE);
00003e  20aa              MOVS     r0,#0xaa
000040  f7fffffe          BL       Flash_Spi_TxRx
;;;568    	while(len > 0){
000044  e007              B        |L8.86|
                  |L8.70|
;;;569    		arr[i++] = Flash_Spi_TxRx(DUMMY_BYTE);
000046  20aa              MOVS     r0,#0xaa
000048  f7fffffe          BL       Flash_Spi_TxRx
00004c  4641              MOV      r1,r8
00004e  f1080801          ADD      r8,r8,#1
000052  5470              STRB     r0,[r6,r1]
;;;570    		len --;
000054  1e64              SUBS     r4,r4,#1
                  |L8.86|
000056  2c00              CMP      r4,#0                 ;568
000058  d1f5              BNE      |L8.70|
;;;571    	}
;;;572    	CS_HIGH();
00005a  2110              MOVS     r1,#0x10
00005c  4803              LDR      r0,|L8.108|
00005e  f7fffffe          BL       GPIO_SetBits
;;;573    	Flash_wait_busy();
000062  f7fffffe          BL       Flash_wait_busy
;;;574    	return 0;
000066  2000              MOVS     r0,#0
;;;575    }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;576    void Flash_Dump_filetable(void)
                          ENDP

                  |L8.108|
                          DCD      0x40021000

                          AREA ||i.Flash_Sector_Erase||, CODE, READONLY, ALIGN=2

                  Flash_Sector_Erase PROC
;;;230    //}
;;;231    u8 Flash_Sector_Erase(u32 add)
000000  b510              PUSH     {r4,lr}
;;;232    {
000002  4604              MOV      r4,r0
;;;233    	CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  480c              LDR      r0,|L9.56|
000008  f7fffffe          BL       GPIO_ResetBits
;;;234    	Flash_Spi_TxRx(FLASH_SECTOR_ERASE);
00000c  207c              MOVS     r0,#0x7c
00000e  f7fffffe          BL       Flash_Spi_TxRx
;;;235    	Flash_Spi_TxRx(add >> 16);
000012  f3c44007          UBFX     r0,r4,#16,#8
000016  f7fffffe          BL       Flash_Spi_TxRx
;;;236    	Flash_Spi_TxRx(add >> 8);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;237    	Flash_Spi_TxRx(add >> 0);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       Flash_Spi_TxRx
;;;238    	CS_HIGH();
000028  2110              MOVS     r1,#0x10
00002a  4803              LDR      r0,|L9.56|
00002c  f7fffffe          BL       GPIO_SetBits
;;;239    	Flash_wait_busy();
000030  f7fffffe          BL       Flash_wait_busy
;;;240    	
;;;241    	return 1;
000034  2001              MOVS     r0,#1
;;;242    }
000036  bd10              POP      {r4,pc}
;;;243    
                          ENDP

                  |L9.56|
                          DCD      0x40021000

                          AREA ||i.Flash_Spi_TxRx||, CODE, READONLY, ALIGN=2

                  Flash_Spi_TxRx PROC
;;;793    }
;;;794    u8 Flash_Spi_TxRx(u8 data){
000000  4601              MOV      r1,r0
;;;795    
;;;796    	SPI4->DR = data; 			//transmit
000002  480d              LDR      r0,|L10.56|
000004  8001              STRH     r1,[r0,#0]
;;;797    	while( !(SPI4->SR & SPI_I2S_FLAG_TXE) ); 	// wait until transmit complete
000006  bf00              NOP      
                  |L10.8|
000008  480b              LDR      r0,|L10.56|
00000a  1f00              SUBS     r0,r0,#4
00000c  8800              LDRH     r0,[r0,#0]
00000e  f0100f02          TST      r0,#2
000012  d0f9              BEQ      |L10.8|
;;;798    	while( !(SPI4->SR & SPI_I2S_FLAG_RXNE) ); // wait until receive complete
000014  bf00              NOP      
                  |L10.22|
000016  4808              LDR      r0,|L10.56|
000018  1f00              SUBS     r0,r0,#4
00001a  8800              LDRH     r0,[r0,#0]
00001c  f0100f01          TST      r0,#1
000020  d0f9              BEQ      |L10.22|
;;;799    	while( SPI4->SR & SPI_I2S_FLAG_BSY ); // wait until SPI is not busy anymore
000022  bf00              NOP      
                  |L10.36|
000024  4804              LDR      r0,|L10.56|
000026  1f00              SUBS     r0,r0,#4
000028  8800              LDRH     r0,[r0,#0]
00002a  f0100f80          TST      r0,#0x80
00002e  d1f9              BNE      |L10.36|
;;;800    	return SPI4->DR; // recieve
000030  4801              LDR      r0,|L10.56|
000032  8800              LDRH     r0,[r0,#0]
000034  b2c0              UXTB     r0,r0
;;;801    }
000036  4770              BX       lr
;;;802    
                          ENDP

                  |L10.56|
                          DCD      0x4001340c

                          AREA ||i.Flash_Write||, CODE, READONLY, ALIGN=2

                  Flash_Write PROC
;;;526    
;;;527    u8 Flash_Write(u32 fa, u8 * arr , u32 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;528    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;529    	u8 i=0;
00000a  f04f0800          MOV      r8,#0
;;;530    	u32 add;
;;;531    	if(len > WORKING_PAGE_SZ)
00000e  f5b47f00          CMP      r4,#0x200
000012  d905              BLS      |L11.32|
;;;532    	{
;;;533    		SerComSendMessageUser("Page Fault Exiting Write\r\n");
000014  a019              ADR      r0,|L11.124|
000016  f7fffffe          BL       SerComSendMessageUser
;;;534    		return 0;
00001a  2000              MOVS     r0,#0
                  |L11.28|
;;;535    	}
;;;536    	Flash_dis_sect_prot();
;;;537    	CS_LOW();
;;;538    	
;;;539    	add = Flash_convert_addr(fa,WORKING_PAGE_SZ);
;;;540    	
;;;541    	Flash_Spi_TxRx(FLASH_OP_BUFFER_WR_MEM);
;;;542    	Flash_Spi_TxRx(add >> 16);
;;;543    	Flash_Spi_TxRx(add >> 8);
;;;544    	Flash_Spi_TxRx(add >> 0);
;;;545    	
;;;546    	while(len){
;;;547    		Flash_Spi_TxRx(arr[i++]);	
;;;548    		len--;
;;;549    	}
;;;550    
;;;551    	CS_HIGH();
;;;552    	Flash_wait_busy();
;;;553    	
;;;554    	return 1;
;;;555    
;;;556    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L11.32|
000020  f7fffffe          BL       Flash_dis_sect_prot
000024  2110              MOVS     r1,#0x10              ;537
000026  481c              LDR      r0,|L11.152|
000028  f7fffffe          BL       GPIO_ResetBits
00002c  f44f7100          MOV      r1,#0x200             ;539
000030  4638              MOV      r0,r7                 ;539
000032  f7fffffe          BL       Flash_convert_addr
000036  4605              MOV      r5,r0                 ;539
000038  2082              MOVS     r0,#0x82              ;541
00003a  f7fffffe          BL       Flash_Spi_TxRx
00003e  f3c54007          UBFX     r0,r5,#16,#8          ;542
000042  f7fffffe          BL       Flash_Spi_TxRx
000046  f3c52007          UBFX     r0,r5,#8,#8           ;543
00004a  f7fffffe          BL       Flash_Spi_TxRx
00004e  b2e8              UXTB     r0,r5                 ;544
000050  f7fffffe          BL       Flash_Spi_TxRx
000054  e007              B        |L11.102|
                  |L11.86|
000056  4641              MOV      r1,r8                 ;547
000058  1c4a              ADDS     r2,r1,#1              ;547
00005a  f00208ff          AND      r8,r2,#0xff           ;547
00005e  5c70              LDRB     r0,[r6,r1]            ;547
000060  f7fffffe          BL       Flash_Spi_TxRx
000064  1e64              SUBS     r4,r4,#1              ;548
                  |L11.102|
000066  2c00              CMP      r4,#0                 ;546
000068  d1f5              BNE      |L11.86|
00006a  2110              MOVS     r1,#0x10              ;551
00006c  480a              LDR      r0,|L11.152|
00006e  f7fffffe          BL       GPIO_SetBits
000072  f7fffffe          BL       Flash_wait_busy
000076  2001              MOVS     r0,#1                 ;554
000078  e7d0              B        |L11.28|
;;;557    
                          ENDP

00007a  0000              DCW      0x0000
                  |L11.124|
00007c  50616765          DCB      "Page Fault Exiting Write\r\n",0
000080  20466175
000084  6c742045
000088  78697469
00008c  6e672057
000090  72697465
000094  0d0a00  
000097  00                DCB      0
                  |L11.152|
                          DCD      0x40021000

                          AREA ||i.Flash_chip_erase||, CODE, READONLY, ALIGN=2

                  Flash_chip_erase PROC
;;;731    }
;;;732    void Flash_chip_erase(void)
000000  b510              PUSH     {r4,lr}
;;;733    {
;;;734    	CS_LOW();
000002  2110              MOVS     r1,#0x10
000004  480a              LDR      r0,|L12.48|
000006  f7fffffe          BL       GPIO_ResetBits
;;;735    	Flash_Spi_TxRx(0xc7);
00000a  20c7              MOVS     r0,#0xc7
00000c  f7fffffe          BL       Flash_Spi_TxRx
;;;736    	Flash_Spi_TxRx(0x94);
000010  2094              MOVS     r0,#0x94
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;737    	Flash_Spi_TxRx(0x80);
000016  2080              MOVS     r0,#0x80
000018  f7fffffe          BL       Flash_Spi_TxRx
;;;738    	Flash_Spi_TxRx(0x9a);
00001c  209a              MOVS     r0,#0x9a
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;739    	CS_HIGH();
000022  2110              MOVS     r1,#0x10
000024  4802              LDR      r0,|L12.48|
000026  f7fffffe          BL       GPIO_SetBits
;;;740    	Flash_wait_busy();
00002a  f7fffffe          BL       Flash_wait_busy
;;;741    }
00002e  bd10              POP      {r4,pc}
;;;742    u32 Flash_read_prot_reg(void)
                          ENDP

                  |L12.48|
                          DCD      0x40021000

                          AREA ||i.Flash_convert_addr||, CODE, READONLY, ALIGN=1

                  Flash_convert_addr PROC
;;;39     
;;;40     u32 Flash_convert_addr(u32 addr, u32 page_size)
000000  b530              PUSH     {r4,r5,lr}
;;;41     {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;42     	u32 at45db_addr=0;
000006  2000              MOVS     r0,#0
;;;43     	u32 page_address 	 = addr / WORKING_PAGE_SZ;
000008  0a51              LSRS     r1,r2,#9
;;;44     	u32 buffer_address = addr % WORKING_PAGE_SZ;
00000a  f3c20308          UBFX     r3,r2,#0,#9
;;;45     	
;;;46     	if( WORKING_PAGE_SZ == 528)
;;;47     		at45db_addr = (page_address << 10) | buffer_address;
;;;48     	else if( WORKING_PAGE_SZ == 512)
;;;49     		at45db_addr = (page_address << 9) | buffer_address;
00000e  ea432041          ORR      r0,r3,r1,LSL #9
;;;50     	else
;;;51     		SerComSendMessageUser("Invalid Flash Address\r\n");
;;;52     
;;;53     	return at45db_addr;
;;;54     }
000012  bd30              POP      {r4,r5,pc}
;;;55     
                          ENDP


                          AREA ||i.Flash_dis_sect_prot||, CODE, READONLY, ALIGN=2

                  Flash_dis_sect_prot PROC
;;;721    }
;;;722    void Flash_dis_sect_prot(void)
000000  b510              PUSH     {r4,lr}
;;;723    {
;;;724    	CS_LOW();
000002  2110              MOVS     r1,#0x10
000004  480a              LDR      r0,|L14.48|
000006  f7fffffe          BL       GPIO_ResetBits
;;;725    	Flash_Spi_TxRx(0x3d);
00000a  203d              MOVS     r0,#0x3d
00000c  f7fffffe          BL       Flash_Spi_TxRx
;;;726    	Flash_Spi_TxRx(0x2a);
000010  202a              MOVS     r0,#0x2a
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;727    	Flash_Spi_TxRx(0x7f);
000016  207f              MOVS     r0,#0x7f
000018  f7fffffe          BL       Flash_Spi_TxRx
;;;728    	Flash_Spi_TxRx(0x9a);
00001c  209a              MOVS     r0,#0x9a
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;729    	CS_HIGH();
000022  2110              MOVS     r1,#0x10
000024  4802              LDR      r0,|L14.48|
000026  f7fffffe          BL       GPIO_SetBits
;;;730    	Flash_wait_busy();
00002a  f7fffffe          BL       Flash_wait_busy
;;;731    }
00002e  bd10              POP      {r4,pc}
;;;732    void Flash_chip_erase(void)
                          ENDP

                  |L14.48|
                          DCD      0x40021000

                          AREA ||i.Flash_dump_imagedata||, CODE, READONLY, ALIGN=2

                  Flash_dump_imagedata PROC
;;;674    
;;;675    void Flash_dump_imagedata(u8 fno)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;676    {
000004  4605              MOV      r5,r0
;;;677    	u32 sz,add;
;;;678    	
;;;679    	sz  = Flash_get_file_size(fno);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       Flash_get_file_size
00000c  4606              MOV      r6,r0
;;;680    	add = Flash_convert_addr(ftb[fno],WORKING_PAGE_SZ);
00000e  491f              LDR      r1,|L15.140|
000010  f8510025          LDR      r0,[r1,r5,LSL #2]
000014  f44f7100          MOV      r1,#0x200
000018  f7fffffe          BL       Flash_convert_addr
00001c  4604              MOV      r4,r0
;;;681    
;;;682    	CS_LOW();
00001e  2110              MOVS     r1,#0x10
000020  481b              LDR      r0,|L15.144|
000022  f7fffffe          BL       GPIO_ResetBits
;;;683    	Flash_Spi_TxRx(FLASH_OP_ARR_READ_HF);
000026  200b              MOVS     r0,#0xb
000028  f7fffffe          BL       Flash_Spi_TxRx
;;;684    	Flash_Spi_TxRx((add >> 16)&0xff);
00002c  f3c44007          UBFX     r0,r4,#16,#8
000030  f7fffffe          BL       Flash_Spi_TxRx
;;;685    	Flash_Spi_TxRx((add >> 8) &0xff);
000034  f3c42007          UBFX     r0,r4,#8,#8
000038  f7fffffe          BL       Flash_Spi_TxRx
;;;686    	Flash_Spi_TxRx((add >> 0) &0xff);
00003c  b2e0              UXTB     r0,r4
00003e  f7fffffe          BL       Flash_Spi_TxRx
;;;687    	Flash_Spi_TxRx(DUMMY_BYTE);
000042  20aa              MOVS     r0,#0xaa
000044  f7fffffe          BL       Flash_Spi_TxRx
;;;688    	while(sz > 0){
000048  e016              B        |L15.120|
                  |L15.74|
;;;689    		//SerComSendByte(Flash_Spi_TxRx(DUMMY_BYTE));
;;;690    		while (USART_GetFlagStatus(UART7, USART_FLAG_TC) == 0);
00004a  bf00              NOP      
                  |L15.76|
00004c  2140              MOVS     r1,#0x40
00004e  4811              LDR      r0,|L15.148|
000050  f7fffffe          BL       USART_GetFlagStatus
000054  2800              CMP      r0,#0
000056  d0f9              BEQ      |L15.76|
;;;691    		USART_SendData(UART7,Flash_Spi_TxRx(DUMMY_BYTE));
000058  20aa              MOVS     r0,#0xaa
00005a  f7fffffe          BL       Flash_Spi_TxRx
00005e  4607              MOV      r7,r0
000060  4639              MOV      r1,r7
000062  480c              LDR      r0,|L15.148|
000064  f7fffffe          BL       USART_SendData
;;;692    		while (USART_GetFlagStatus(UART7, USART_FLAG_TC) == 0);
000068  bf00              NOP      
                  |L15.106|
00006a  2140              MOVS     r1,#0x40
00006c  4809              LDR      r0,|L15.148|
00006e  f7fffffe          BL       USART_GetFlagStatus
000072  2800              CMP      r0,#0
000074  d0f9              BEQ      |L15.106|
;;;693    		sz--;
000076  1e76              SUBS     r6,r6,#1
                  |L15.120|
000078  2e00              CMP      r6,#0                 ;688
00007a  d1e6              BNE      |L15.74|
;;;694    	}
;;;695    	CS_HIGH();
00007c  2110              MOVS     r1,#0x10
00007e  4804              LDR      r0,|L15.144|
000080  f7fffffe          BL       GPIO_SetBits
;;;696    	Flash_wait_busy();
000084  f7fffffe          BL       Flash_wait_busy
;;;697    	
;;;698    }
000088  e8bd81f0          POP      {r4-r8,pc}
;;;699    
                          ENDP

                  |L15.140|
                          DCD      ||ftb||
                  |L15.144|
                          DCD      0x40021000
                  |L15.148|
                          DCD      0x40007800

                          AREA ||i.Flash_enb_sect_prot||, CODE, READONLY, ALIGN=2

                  Flash_enb_sect_prot PROC
;;;711    }
;;;712    void Flash_enb_sect_prot(void)
000000  b510              PUSH     {r4,lr}
;;;713    {
;;;714    	CS_LOW();
000002  2110              MOVS     r1,#0x10
000004  480a              LDR      r0,|L16.48|
000006  f7fffffe          BL       GPIO_ResetBits
;;;715    	Flash_Spi_TxRx(0x3d);
00000a  203d              MOVS     r0,#0x3d
00000c  f7fffffe          BL       Flash_Spi_TxRx
;;;716    	Flash_Spi_TxRx(0x2a);
000010  202a              MOVS     r0,#0x2a
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;717    	Flash_Spi_TxRx(0x7f);
000016  207f              MOVS     r0,#0x7f
000018  f7fffffe          BL       Flash_Spi_TxRx
;;;718    	Flash_Spi_TxRx(0xa9);
00001c  20a9              MOVS     r0,#0xa9
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;719    	CS_HIGH();
000022  2110              MOVS     r1,#0x10
000024  4802              LDR      r0,|L16.48|
000026  f7fffffe          BL       GPIO_SetBits
;;;720    	Flash_wait_busy();
00002a  f7fffffe          BL       Flash_wait_busy
;;;721    }
00002e  bd10              POP      {r4,pc}
;;;722    void Flash_dis_sect_prot(void)
                          ENDP

                  |L16.48|
                          DCD      0x40021000

                          AREA ||i.Flash_get_file_size||, CODE, READONLY, ALIGN=2

                  Flash_get_file_size PROC
;;;651    
;;;652    u32 Flash_get_file_size(u8 fno)
000000  b570              PUSH     {r4-r6,lr}
;;;653    {
000002  4605              MOV      r5,r0
;;;654    	fe * fileinfo;
;;;655    	u32 sz;
;;;656    	
;;;657    	Flash_Read(FTABLE_ADDRESS,(void*)&file_sys,sizeof(file_sys));
000004  2250              MOVS     r2,#0x50
000006  4910              LDR      r1,|L17.72|
000008  4810              LDR      r0,|L17.76|
00000a  f7fffffe          BL       Flash_Read
;;;658    	
;;;659    	if ( file_sys.header  != 0x01ABCDEF)
00000e  480e              LDR      r0,|L17.72|
000010  6800              LDR      r0,[r0,#0]  ; file_sys
000012  490f              LDR      r1,|L17.80|
000014  4288              CMP      r0,r1
000016  d006              BEQ      |L17.38|
;;;660    	{
;;;661    		SerComSendMessageUser("File System Corrupt\r\n");
000018  a00e              ADR      r0,|L17.84|
00001a  f7fffffe          BL       SerComSendMessageUser
;;;662    		Flash_Create_FS();
00001e  f7fffffe          BL       Flash_Create_FS
;;;663    		return 0;
000022  2000              MOVS     r0,#0
                  |L17.36|
;;;664    	}
;;;665    	fileinfo =(fe*)&file_sys.ftable[fno*4];//Read file info data into structure pointer
;;;666    	if(fileinfo->sz > MAX_FILE_ENTRY)//Invalid File size
;;;667    	{
;;;668    		SerComSendMessageUser("File Info Corrupt\r\n");
;;;669    		Flash_Create_FS();
;;;670    		return 0;
;;;671    	}
;;;672    	return fileinfo->sz;
;;;673    }
000024  bd70              POP      {r4-r6,pc}
                  |L17.38|
000026  4808              LDR      r0,|L17.72|
000028  3010              ADDS     r0,r0,#0x10           ;665
00002a  eb001405          ADD      r4,r0,r5,LSL #4       ;665
00002e  68a0              LDR      r0,[r4,#8]            ;666
000030  f5b02f80          CMP      r0,#0x40000           ;666
000034  d906              BLS      |L17.68|
000036  a00d              ADR      r0,|L17.108|
000038  f7fffffe          BL       SerComSendMessageUser
00003c  f7fffffe          BL       Flash_Create_FS
000040  2000              MOVS     r0,#0                 ;670
000042  e7ef              B        |L17.36|
                  |L17.68|
000044  68a0              LDR      r0,[r4,#8]            ;672
000046  e7ed              B        |L17.36|
;;;674    
                          ENDP

                  |L17.72|
                          DCD      file_sys
                  |L17.76|
                          DCD      0x000ff200
                  |L17.80|
                          DCD      0x01abcdef
                  |L17.84|
000054  46696c65          DCB      "File System Corrupt\r\n",0
000058  20537973
00005c  74656d20
000060  436f7272
000064  7570740d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L17.108|
00006c  46696c65          DCB      "File Info Corrupt\r\n",0
000070  20496e66
000074  6f20436f
000078  72727570
00007c  740d0a00

                          AREA ||i.Flash_get_page_addr||, CODE, READONLY, ALIGN=1

                  Flash_get_page_addr PROC
;;;56     //Return Page address
;;;57     u32 Flash_get_page_addr(u32 pageno)
000000  4601              MOV      r1,r0
;;;58     {
;;;59     	u32 at45db_addr=0;
000002  2000              MOVS     r0,#0
;;;60     	
;;;61     	if( WORKING_PAGE_SZ == 512)
;;;62     		at45db_addr = (pageno << 9);
000004  0248              LSLS     r0,r1,#9
;;;63     	else if( WORKING_PAGE_SZ == 528)
;;;64     		at45db_addr = (pageno << 10);
;;;65     	else
;;;66     		SerComSendMessageUser("Invalid Flash Page Acess\r\n");
;;;67     	
;;;68     	return at45db_addr;
;;;69     }
000006  4770              BX       lr
;;;70     
                          ENDP


                          AREA ||i.Flash_init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  Flash_init PROC
;;;802    
;;;803    u8 Flash_init(void)//check if flash is OK and update parameters
000000  b510              PUSH     {r4,lr}
;;;804    {
000002  b08e              SUB      sp,sp,#0x38
;;;805      u16 v;
;;;806      u8 sb[50];
;;;807      Flash_dis_sect_prot();
000004  f7fffffe          BL       Flash_dis_sect_prot
;;;808    	
;;;809      Flash_Configure_Pagesz(BINARY);
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       Flash_Configure_Pagesz
;;;810    	
;;;811    	v = Flash_read_status();
00000e  f7fffffe          BL       Flash_read_status
000012  4604              MOV      r4,r0
;;;812    	
;;;813    	//1011 - 16 Mbit Version
;;;814    	//1101 - 32 Mbit Version
;;;815    	//0101 - 2 Mbit Version
;;;816    	
;;;817    	SerComSendMessageUser("Working Page Size:");
000014  a01f              ADR      r0,|L19.148|
000016  f7fffffe          BL       SerComSendMessageUser
;;;818    	sprintf(sb," %d Bytes\r\n",WORKING_PAGE_SZ);
00001a  f44f7200          MOV      r2,#0x200
00001e  a122              ADR      r1,|L19.168|
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       __2sprintf
;;;819    	SerComSendMessageUser(sb);
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       SerComSendMessageUser
;;;820    	
;;;821    	if((v & 0x0100))
00002c  f4147f80          TST      r4,#0x100
000030  d003              BEQ      |L19.58|
;;;822    	{
;;;823    		SerComSendMessageUser("Binary Page Size\r\n");
000032  a020              ADR      r0,|L19.180|
000034  f7fffffe          BL       SerComSendMessageUser
000038  e005              B        |L19.70|
                  |L19.58|
;;;824    	}
;;;825    	else
;;;826    	{
;;;827    		SerComSendMessageUser("Unsupported Flash!\r\n");
00003a  a023              ADR      r0,|L19.200|
00003c  f7fffffe          BL       SerComSendMessageUser
;;;828    		return 0;
000040  2000              MOVS     r0,#0
                  |L19.66|
;;;829    	}
;;;830    	if( (v & (0x0f << 10)) == (5 << 10))
;;;831    	{
;;;832    		SerComSendMessageUser("2-Mbit Flash Detected\r\n");
;;;833    		SerComSendMessageUser("Unsupported Flash!\r\n");
;;;834    		return 0;
;;;835    	}
;;;836    	if( (v & (0x0f << 10)) == (0x0b << 10))
;;;837    	{
;;;838    		SerComSendMessageUser("16-Mbit Flash Detected\r\n");
;;;839    #ifndef M16
;;;840    		SerComSendMessageUser("Unsupported Flash!\r\n");
;;;841    		return 1;
;;;842    #endif
;;;843    	}
;;;844    	if( (v & (0x0f << 10)) == (0x0d << 10))
;;;845    	{
;;;846    		SerComSendMessageUser("32-Mbit Flash Detected\r\n");
;;;847    #ifndef M32
;;;848    		SerComSendMessageUser("Unsupported Flash!\r\n");
;;;849    		return 1;
;;;850    #endif
;;;851    	}
;;;852    	SerComSendMessageUser("Flash Init Done!");
;;;853    	return 0;
;;;854    }
000042  b00e              ADD      sp,sp,#0x38
000044  bd10              POP      {r4,pc}
                  |L19.70|
000046  f4045070          AND      r0,r4,#0x3c00         ;830
00004a  f5b05fa0          CMP      r0,#0x1400            ;830
00004e  d107              BNE      |L19.96|
000050  a023              ADR      r0,|L19.224|
000052  f7fffffe          BL       SerComSendMessageUser
000056  a01c              ADR      r0,|L19.200|
000058  f7fffffe          BL       SerComSendMessageUser
00005c  2000              MOVS     r0,#0                 ;834
00005e  e7f0              B        |L19.66|
                  |L19.96|
000060  f4045070          AND      r0,r4,#0x3c00         ;836
000064  f5b05f30          CMP      r0,#0x2c00            ;836
000068  d102              BNE      |L19.112|
00006a  a023              ADR      r0,|L19.248|
00006c  f7fffffe          BL       SerComSendMessageUser
                  |L19.112|
000070  f4045070          AND      r0,r4,#0x3c00         ;844
000074  f5b05f50          CMP      r0,#0x3400            ;844
000078  d107              BNE      |L19.138|
00007a  a026              ADR      r0,|L19.276|
00007c  f7fffffe          BL       SerComSendMessageUser
000080  a011              ADR      r0,|L19.200|
000082  f7fffffe          BL       SerComSendMessageUser
000086  2001              MOVS     r0,#1                 ;849
000088  e7db              B        |L19.66|
                  |L19.138|
00008a  a029              ADR      r0,|L19.304|
00008c  f7fffffe          BL       SerComSendMessageUser
000090  2000              MOVS     r0,#0                 ;853
000092  e7d6              B        |L19.66|
;;;855    
                          ENDP

                  |L19.148|
000094  576f726b          DCB      "Working Page Size:",0
000098  696e6720
00009c  50616765
0000a0  2053697a
0000a4  653a00  
0000a7  00                DCB      0
                  |L19.168|
0000a8  20256420          DCB      " %d Bytes\r\n",0
0000ac  42797465
0000b0  730d0a00
                  |L19.180|
0000b4  42696e61          DCB      "Binary Page Size\r\n",0
0000b8  72792050
0000bc  61676520
0000c0  53697a65
0000c4  0d0a00  
0000c7  00                DCB      0
                  |L19.200|
0000c8  556e7375          DCB      "Unsupported Flash!\r\n",0
0000cc  70706f72
0000d0  74656420
0000d4  466c6173
0000d8  68210d0a
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L19.224|
0000e0  322d4d62          DCB      "2-Mbit Flash Detected\r\n",0
0000e4  69742046
0000e8  6c617368
0000ec  20446574
0000f0  65637465
0000f4  640d0a00
                  |L19.248|
0000f8  31362d4d          DCB      "16-Mbit Flash Detected\r\n",0
0000fc  62697420
000100  466c6173
000104  68204465
000108  74656374
00010c  65640d0a
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
                  |L19.276|
000114  33322d4d          DCB      "32-Mbit Flash Detected\r\n",0
000118  62697420
00011c  466c6173
000120  68204465
000124  74656374
000128  65640d0a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L19.304|
000130  466c6173          DCB      "Flash Init Done!",0
000134  6820496e
000138  69742044
00013c  6f6e6521
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.Flash_read_ID||, CODE, READONLY, ALIGN=2

                  Flash_read_ID PROC
;;;775    
;;;776    u32 Flash_read_ID(void)
000000  b510              PUSH     {r4,lr}
;;;777    {
;;;778    	 u32 id=0;
000002  2400              MOVS     r4,#0
;;;779    
;;;780    	CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  4810              LDR      r0,|L20.72|
000008  f7fffffe          BL       GPIO_ResetBits
;;;781    	Flash_Spi_TxRx(FLASH_OP_RD_ID);
00000c  209f              MOVS     r0,#0x9f
00000e  f7fffffe          BL       Flash_Spi_TxRx
;;;782    	id |= Flash_Spi_TxRx(DUMMY_BYTE);
000012  20aa              MOVS     r0,#0xaa
000014  f7fffffe          BL       Flash_Spi_TxRx
000018  4304              ORRS     r4,r4,r0
;;;783    	id<<=8;
00001a  0224              LSLS     r4,r4,#8
;;;784    	id |= Flash_Spi_TxRx(DUMMY_BYTE);
00001c  20aa              MOVS     r0,#0xaa
00001e  f7fffffe          BL       Flash_Spi_TxRx
000022  4304              ORRS     r4,r4,r0
;;;785    	id<<=8;
000024  0224              LSLS     r4,r4,#8
;;;786    	id |= Flash_Spi_TxRx(DUMMY_BYTE);
000026  20aa              MOVS     r0,#0xaa
000028  f7fffffe          BL       Flash_Spi_TxRx
00002c  4304              ORRS     r4,r4,r0
;;;787    	id<<=8;
00002e  0224              LSLS     r4,r4,#8
;;;788    	id |= Flash_Spi_TxRx(DUMMY_BYTE);
000030  20aa              MOVS     r0,#0xaa
000032  f7fffffe          BL       Flash_Spi_TxRx
000036  4304              ORRS     r4,r4,r0
;;;789    	CS_HIGH();
000038  2110              MOVS     r1,#0x10
00003a  4803              LDR      r0,|L20.72|
00003c  f7fffffe          BL       GPIO_SetBits
;;;790    	Flash_wait_busy();
000040  f7fffffe          BL       Flash_wait_busy
;;;791    		
;;;792    	return id;
000044  4620              MOV      r0,r4
;;;793    }
000046  bd10              POP      {r4,pc}
;;;794    u8 Flash_Spi_TxRx(u8 data){
                          ENDP

                  |L20.72|
                          DCD      0x40021000

                          AREA ||i.Flash_read_arr||, CODE, READONLY, ALIGN=2

                  Flash_read_arr PROC
;;;149    }
;;;150    u8 Flash_read_arr(u32 add, u8* b,u32 n)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;151    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;152    	u32 i=0;
00000a  2700              MOVS     r7,#0
;;;153    	CS_LOW();
00000c  2110              MOVS     r1,#0x10
00000e  4813              LDR      r0,|L21.92|
000010  f7fffffe          BL       GPIO_ResetBits
;;;154    	Flash_Spi_TxRx(FLASH_OP_ARR_READ_HF);
000014  200b              MOVS     r0,#0xb
000016  f7fffffe          BL       Flash_Spi_TxRx
;;;155    	Flash_Spi_TxRx((add >> 16)&0xff);
00001a  f3c44007          UBFX     r0,r4,#16,#8
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;156    	Flash_Spi_TxRx((add >> 8)&0xff);
000022  f3c42007          UBFX     r0,r4,#8,#8
000026  f7fffffe          BL       Flash_Spi_TxRx
;;;157    	Flash_Spi_TxRx((add >> 0)&0xff);
00002a  b2e0              UXTB     r0,r4
00002c  f7fffffe          BL       Flash_Spi_TxRx
;;;158    	Flash_Spi_TxRx(DUMMY_BYTE);
000030  20aa              MOVS     r0,#0xaa
000032  f7fffffe          BL       Flash_Spi_TxRx
;;;159    	while(n>0){
000036  e006              B        |L21.70|
                  |L21.56|
;;;160    		b[i++] = Flash_Spi_TxRx(DUMMY_BYTE);
000038  20aa              MOVS     r0,#0xaa
00003a  f7fffffe          BL       Flash_Spi_TxRx
00003e  4639              MOV      r1,r7
000040  1c7f              ADDS     r7,r7,#1
000042  5470              STRB     r0,[r6,r1]
;;;161    		n--;
000044  1e6d              SUBS     r5,r5,#1
                  |L21.70|
000046  2d00              CMP      r5,#0                 ;159
000048  d1f6              BNE      |L21.56|
;;;162    	}
;;;163    	CS_HIGH();
00004a  2110              MOVS     r1,#0x10
00004c  4803              LDR      r0,|L21.92|
00004e  f7fffffe          BL       GPIO_SetBits
;;;164    	Flash_wait_busy();
000052  f7fffffe          BL       Flash_wait_busy
;;;165    	
;;;166    	return 1;
000056  2001              MOVS     r0,#1
;;;167    }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;168    
                          ENDP

                  |L21.92|
                          DCD      0x40021000

                          AREA ||i.Flash_read_buffer||, CODE, READONLY, ALIGN=2

                  Flash_read_buffer PROC
;;;110    
;;;111    u8 Flash_read_buffer(u8* b, u32 add)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u16 i=0;
000006  2600              MOVS     r6,#0
;;;114    	CS_LOW();
000008  2110              MOVS     r1,#0x10
00000a  4813              LDR      r0,|L22.88|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;115    	Flash_Spi_TxRx(FLASH_OP_BUFFER_RD);
000010  20d4              MOVS     r0,#0xd4
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;116    	Flash_Spi_TxRx((add >> 16)&0xff);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       Flash_Spi_TxRx
;;;117    	Flash_Spi_TxRx((add >> 8)&0xff);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       Flash_Spi_TxRx
;;;118    	Flash_Spi_TxRx((add >> 0)&0xff);
000026  b2e0              UXTB     r0,r4
000028  f7fffffe          BL       Flash_Spi_TxRx
;;;119    	Flash_Spi_TxRx(DUMMY_BYTE);	
00002c  20aa              MOVS     r0,#0xaa
00002e  f7fffffe          BL       Flash_Spi_TxRx
;;;120    	while(i<WORKING_PAGE_SZ){
000032  e006              B        |L22.66|
                  |L22.52|
;;;121    		b[i++] = Flash_Spi_TxRx(DUMMY_BYTE);		
000034  20aa              MOVS     r0,#0xaa
000036  f7fffffe          BL       Flash_Spi_TxRx
00003a  4631              MOV      r1,r6
00003c  1c72              ADDS     r2,r6,#1
00003e  b296              UXTH     r6,r2
000040  5468              STRB     r0,[r5,r1]
                  |L22.66|
000042  f5b67f00          CMP      r6,#0x200             ;120
000046  dbf5              BLT      |L22.52|
;;;122    	}
;;;123    	CS_HIGH();
000048  2110              MOVS     r1,#0x10
00004a  4803              LDR      r0,|L22.88|
00004c  f7fffffe          BL       GPIO_SetBits
;;;124    	Flash_wait_busy();
000050  f7fffffe          BL       Flash_wait_busy
;;;125    	
;;;126    	return 1;
000054  2001              MOVS     r0,#1
;;;127    }
000056  bd70              POP      {r4-r6,pc}
;;;128    u8 Flash_read_buffer_flash(u32 add)
                          ENDP

                  |L22.88|
                          DCD      0x40021000

                          AREA ||i.Flash_read_buffer_flash||, CODE, READONLY, ALIGN=2

                  Flash_read_buffer_flash PROC
;;;127    }
;;;128    u8 Flash_read_buffer_flash(u32 add)
000000  b510              PUSH     {r4,lr}
;;;129    {
000002  4604              MOV      r4,r0
;;;130    	CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  480c              LDR      r0,|L23.56|
000008  f7fffffe          BL       GPIO_ResetBits
;;;131    	Flash_Spi_TxRx(FLASH_OP_BF_LOAD_FLASH);
00000c  2053              MOVS     r0,#0x53
00000e  f7fffffe          BL       Flash_Spi_TxRx
;;;132    	Flash_Spi_TxRx((add >> 16)&0xff);
000012  f3c44007          UBFX     r0,r4,#16,#8
000016  f7fffffe          BL       Flash_Spi_TxRx
;;;133    	Flash_Spi_TxRx((add >> 8)&0xff);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;134    	Flash_Spi_TxRx((add >> 0)&0xff);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       Flash_Spi_TxRx
;;;135    	CS_HIGH();
000028  2110              MOVS     r1,#0x10
00002a  4803              LDR      r0,|L23.56|
00002c  f7fffffe          BL       GPIO_SetBits
;;;136    	Flash_wait_busy();
000030  f7fffffe          BL       Flash_wait_busy
;;;137    	return 1;
000034  2001              MOVS     r0,#1
;;;138    }
000036  bd10              POP      {r4,pc}
;;;139    u8 Flash_write_buffer_flash(u32 add)
                          ENDP

                  |L23.56|
                          DCD      0x40021000

                          AREA ||i.Flash_read_prot_reg||, CODE, READONLY, ALIGN=2

                  Flash_read_prot_reg PROC
;;;741    }
;;;742    u32 Flash_read_prot_reg(void)
000000  b510              PUSH     {r4,lr}
;;;743    {
;;;744    	u32 prt = 0;
000002  2400              MOVS     r4,#0
;;;745    	CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  4812              LDR      r0,|L24.80|
000008  f7fffffe          BL       GPIO_ResetBits
;;;746    	Flash_Spi_TxRx(0x32);
00000c  2032              MOVS     r0,#0x32
00000e  f7fffffe          BL       Flash_Spi_TxRx
;;;747    	Flash_Spi_TxRx(DUMMY_BYTE);
000012  20aa              MOVS     r0,#0xaa
000014  f7fffffe          BL       Flash_Spi_TxRx
;;;748    	Flash_Spi_TxRx(DUMMY_BYTE);
000018  20aa              MOVS     r0,#0xaa
00001a  f7fffffe          BL       Flash_Spi_TxRx
;;;749    	Flash_Spi_TxRx(DUMMY_BYTE);
00001e  20aa              MOVS     r0,#0xaa
000020  f7fffffe          BL       Flash_Spi_TxRx
;;;750    	prt |= Flash_Spi_TxRx(DUMMY_BYTE);
000024  20aa              MOVS     r0,#0xaa
000026  f7fffffe          BL       Flash_Spi_TxRx
00002a  4304              ORRS     r4,r4,r0
;;;751    	prt<<=8;
00002c  0224              LSLS     r4,r4,#8
;;;752    	prt |= Flash_Spi_TxRx(DUMMY_BYTE);
00002e  20aa              MOVS     r0,#0xaa
000030  f7fffffe          BL       Flash_Spi_TxRx
000034  4304              ORRS     r4,r4,r0
;;;753    	prt<<=8;
000036  0224              LSLS     r4,r4,#8
;;;754    	prt |= Flash_Spi_TxRx(DUMMY_BYTE);
000038  20aa              MOVS     r0,#0xaa
00003a  f7fffffe          BL       Flash_Spi_TxRx
00003e  4304              ORRS     r4,r4,r0
;;;755    	CS_HIGH();
000040  2110              MOVS     r1,#0x10
000042  4803              LDR      r0,|L24.80|
000044  f7fffffe          BL       GPIO_SetBits
;;;756    	Flash_wait_busy();
000048  f7fffffe          BL       Flash_wait_busy
;;;757    		
;;;758    	return prt;
00004c  4620              MOV      r0,r4
;;;759    }	
00004e  bd10              POP      {r4,pc}
;;;760    
                          ENDP

                  |L24.80|
                          DCD      0x40021000

                          AREA ||i.Flash_read_status||, CODE, READONLY, ALIGN=2

                  Flash_read_status PROC
;;;760    
;;;761    u16 Flash_read_status(void)
000000  b510              PUSH     {r4,lr}
;;;762    {
;;;763    	u16 v = 0;
000002  2400              MOVS     r4,#0
;;;764    	
;;;765    	CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  480e              LDR      r0,|L25.64|
000008  f7fffffe          BL       GPIO_ResetBits
;;;766    	Flash_Spi_TxRx(FLASH_OP_RD_STATUS);
00000c  20d7              MOVS     r0,#0xd7
00000e  f7fffffe          BL       Flash_Spi_TxRx
;;;767    	v |= Flash_Spi_TxRx(DUMMY_BYTE);
000012  20aa              MOVS     r0,#0xaa
000014  f7fffffe          BL       Flash_Spi_TxRx
000018  4304              ORRS     r4,r4,r0
;;;768    	v<<=8;
00001a  f64f70ff          MOV      r0,#0xffff
00001e  ea002404          AND      r4,r0,r4,LSL #8
;;;769    	v |= Flash_Spi_TxRx(DUMMY_BYTE);
000022  20aa              MOVS     r0,#0xaa
000024  f7fffffe          BL       Flash_Spi_TxRx
000028  4304              ORRS     r4,r4,r0
;;;770    	Delayms(CS_LOW_DLY_MS);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       Delayms
;;;771    	CS_HIGH();
000030  2110              MOVS     r1,#0x10
000032  4803              LDR      r0,|L25.64|
000034  f7fffffe          BL       GPIO_SetBits
;;;772    	Flash_wait_busy();
000038  f7fffffe          BL       Flash_wait_busy
;;;773    	return v;
00003c  4620              MOV      r0,r4
;;;774    }	
00003e  bd10              POP      {r4,pc}
;;;775    
                          ENDP

                  |L25.64|
                          DCD      0x40021000

                          AREA ||i.Flash_soft_reset||, CODE, READONLY, ALIGN=2

                  Flash_soft_reset PROC
;;;701    
;;;702    void Flash_soft_reset(void)
000000  b510              PUSH     {r4,lr}
;;;703    {
;;;704    	CS_LOW();
000002  2110              MOVS     r1,#0x10
000004  480a              LDR      r0,|L26.48|
000006  f7fffffe          BL       GPIO_ResetBits
;;;705    	Flash_Spi_TxRx(0xF0);
00000a  20f0              MOVS     r0,#0xf0
00000c  f7fffffe          BL       Flash_Spi_TxRx
;;;706    	Flash_Spi_TxRx(0);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;707    	Flash_Spi_TxRx(0);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       Flash_Spi_TxRx
;;;708    	Flash_Spi_TxRx(0);
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;709    	CS_HIGH();
000022  2110              MOVS     r1,#0x10
000024  4802              LDR      r0,|L26.48|
000026  f7fffffe          BL       GPIO_SetBits
;;;710    	Flash_wait_busy();
00002a  f7fffffe          BL       Flash_wait_busy
;;;711    }
00002e  bd10              POP      {r4,pc}
;;;712    void Flash_enb_sect_prot(void)
                          ENDP

                  |L26.48|
                          DCD      0x40021000

                          AREA ||i.Flash_wait_busy||, CODE, READONLY, ALIGN=2

                  Flash_wait_busy PROC
;;;71     //Check if Flash is Busy
;;;72     void Flash_wait_busy(void)
000000  b570              PUSH     {r4-r6,lr}
;;;73     {
;;;74     	u8 v = 0;
000002  2500              MOVS     r5,#0
;;;75     	u32 i= 0;
000004  2400              MOVS     r4,#0
;;;76     	
;;;77     	CS_LOW();
000006  2110              MOVS     r1,#0x10
000008  4811              LDR      r0,|L27.80|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;78     	while(i<FLASH_TIMEOUT){
00000e  e00e              B        |L27.46|
                  |L27.16|
;;;79     		
;;;80     		Flash_Spi_TxRx(FLASH_OP_RD_STATUS);
000010  20d7              MOVS     r0,#0xd7
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;81     		v = Flash_Spi_TxRx(DUMMY_BYTE);
000016  20aa              MOVS     r0,#0xaa
000018  f7fffffe          BL       Flash_Spi_TxRx
00001c  4605              MOV      r5,r0
;;;82     		if (v != 0xFF)
00001e  2dff              CMP      r5,#0xff
000020  d004              BEQ      |L27.44|
;;;83     			if ((v & 0x80) == 0x80){
000022  f0050080          AND      r0,r5,#0x80
000026  2880              CMP      r0,#0x80
000028  d100              BNE      |L27.44|
;;;84     				break;
00002a  e004              B        |L27.54|
                  |L27.44|
;;;85     			}
;;;86     		i++;
00002c  1c64              ADDS     r4,r4,#1
                  |L27.46|
00002e  f06f407f          MVN      r0,#0xff000000        ;78
000032  4284              CMP      r4,r0                 ;78
000034  d3ec              BCC      |L27.16|
                  |L27.54|
000036  bf00              NOP                            ;84
;;;87     	}
;;;88     	if(i>=FLASH_TIMEOUT)
000038  f06f407f          MVN      r0,#0xff000000
00003c  4284              CMP      r4,r0
00003e  d302              BCC      |L27.70|
;;;89     	{
;;;90     		SerComSendMessageUser("Flash operation timed out\r\n");
000040  a004              ADR      r0,|L27.84|
000042  f7fffffe          BL       SerComSendMessageUser
                  |L27.70|
;;;91     	}
;;;92     	CS_HIGH();
000046  2110              MOVS     r1,#0x10
000048  4801              LDR      r0,|L27.80|
00004a  f7fffffe          BL       GPIO_SetBits
;;;93     }
00004e  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

                  |L27.80|
                          DCD      0x40021000
                  |L27.84|
000054  466c6173          DCB      "Flash operation timed out\r\n",0
000058  68206f70
00005c  65726174
000060  696f6e20
000064  74696d65
000068  64206f75
00006c  740d0a00

                          AREA ||i.Flash_wr_mem||, CODE, READONLY, ALIGN=2

                  Flash_wr_mem PROC
;;;186    
;;;187    u8 Flash_wr_mem(u8* b, u32 add,u16 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;188    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;189    	u16 i=0;
00000a  2700              MOVS     r7,#0
;;;190    	
;;;191    #ifdef DBG_FLASH
;;;192    	u8 sb[50];
;;;193    	sprintf(sb,"FL A:%x,L:%x\r\n",add,len);
;;;194    	SerComSendMessageUser(sb);
;;;195    #endif
;;;196    	CS_LOW();
00000c  2110              MOVS     r1,#0x10
00000e  4811              LDR      r0,|L28.84|
000010  f7fffffe          BL       GPIO_ResetBits
;;;197    //	SerComSendMessageUser("---DATA---");
;;;198    	Flash_Spi_TxRx(FLASH_OP_WR_MEM);
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       Flash_Spi_TxRx
;;;199    	Flash_Spi_TxRx(add >> 16);
00001a  f3c44007          UBFX     r0,r4,#16,#8
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;200    	Flash_Spi_TxRx(add >> 8);
000022  f3c42007          UBFX     r0,r4,#8,#8
000026  f7fffffe          BL       Flash_Spi_TxRx
;;;201    	Flash_Spi_TxRx(add >> 0);
00002a  b2e0              UXTB     r0,r4
00002c  f7fffffe          BL       Flash_Spi_TxRx
;;;202    	while(i<len){
000030  e005              B        |L28.62|
                  |L28.50|
;;;203    		 Flash_Spi_TxRx(b[i++]);
000032  4639              MOV      r1,r7
000034  1c7a              ADDS     r2,r7,#1
000036  b297              UXTH     r7,r2
000038  5c68              LDRB     r0,[r5,r1]
00003a  f7fffffe          BL       Flash_Spi_TxRx
                  |L28.62|
00003e  42b7              CMP      r7,r6                 ;202
000040  dbf7              BLT      |L28.50|
;;;204    //		 SerComSendArrayUser(b+i,1);		
;;;205    	}
;;;206    //	SerComSendMessageUser("---XXX---");
;;;207    #ifdef DBG_FLASH
;;;208    	//
;;;209    	//SerComSendArrayUser(b,len);
;;;210    	//
;;;211    #endif
;;;212    	
;;;213    	CS_HIGH();
000042  2110              MOVS     r1,#0x10
000044  4803              LDR      r0,|L28.84|
000046  f7fffffe          BL       GPIO_SetBits
;;;214    	Flash_wait_busy();
00004a  f7fffffe          BL       Flash_wait_busy
;;;215    	
;;;216    	return 1;
00004e  2001              MOVS     r0,#1
;;;217    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;218    
                          ENDP

                  |L28.84|
                          DCD      0x40021000

                          AREA ||i.Flash_wr_mem_and_buffer||, CODE, READONLY, ALIGN=2

                  Flash_wr_mem_and_buffer PROC
;;;168    
;;;169    u8 Flash_wr_mem_and_buffer(u8* b, u32 add)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;171    	u16 i=0;
000006  2600              MOVS     r6,#0
;;;172    	CS_LOW();
000008  2110              MOVS     r1,#0x10
00000a  4811              LDR      r0,|L29.80|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;173    	Flash_Spi_TxRx(FLASH_OP_BUFFER_WR_MEM);
000010  2082              MOVS     r0,#0x82
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;174    	Flash_Spi_TxRx(add >> 16);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       Flash_Spi_TxRx
;;;175    	Flash_Spi_TxRx(add >> 8);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       Flash_Spi_TxRx
;;;176    	Flash_Spi_TxRx(add >> 0);
000026  b2e0              UXTB     r0,r4
000028  f7fffffe          BL       Flash_Spi_TxRx
;;;177    	while(i<WORKING_PAGE_SZ){
00002c  e005              B        |L29.58|
                  |L29.46|
;;;178    		 Flash_Spi_TxRx(b[i++]);		
00002e  4631              MOV      r1,r6
000030  1c72              ADDS     r2,r6,#1
000032  b296              UXTH     r6,r2
000034  5c68              LDRB     r0,[r5,r1]
000036  f7fffffe          BL       Flash_Spi_TxRx
                  |L29.58|
00003a  f5b67f00          CMP      r6,#0x200             ;177
00003e  dbf6              BLT      |L29.46|
;;;179    	}
;;;180    	
;;;181    	CS_HIGH();
000040  2110              MOVS     r1,#0x10
000042  4803              LDR      r0,|L29.80|
000044  f7fffffe          BL       GPIO_SetBits
;;;182    	Flash_wait_busy();
000048  f7fffffe          BL       Flash_wait_busy
;;;183    	
;;;184    	return 1;
00004c  2001              MOVS     r0,#1
;;;185    }
00004e  bd70              POP      {r4-r6,pc}
;;;186    
                          ENDP

                  |L29.80|
                          DCD      0x40021000

                          AREA ||i.Flash_write_buffer||, CODE, READONLY, ALIGN=2

                  Flash_write_buffer PROC
;;;94     
;;;95     u8 Flash_write_buffer(u8* b, u32 add)
000000  b570              PUSH     {r4-r6,lr}
;;;96     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;97     	u16 i=0;
000006  2600              MOVS     r6,#0
;;;98     	CS_LOW();
000008  2110              MOVS     r1,#0x10
00000a  4811              LDR      r0,|L30.80|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;99     	Flash_Spi_TxRx(FLASH_OP_BUFFER_WR);
000010  2084              MOVS     r0,#0x84
000012  f7fffffe          BL       Flash_Spi_TxRx
;;;100    	Flash_Spi_TxRx((add >> 16)&0xff);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       Flash_Spi_TxRx
;;;101    	Flash_Spi_TxRx((add >> 8)&0xff);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       Flash_Spi_TxRx
;;;102    	Flash_Spi_TxRx((add >> 0)&0xff);
000026  b2e0              UXTB     r0,r4
000028  f7fffffe          BL       Flash_Spi_TxRx
;;;103    	while(i<WORKING_PAGE_SZ){
00002c  e005              B        |L30.58|
                  |L30.46|
;;;104    		Flash_Spi_TxRx(b[i++]);		
00002e  4631              MOV      r1,r6
000030  1c72              ADDS     r2,r6,#1
000032  b296              UXTH     r6,r2
000034  5c68              LDRB     r0,[r5,r1]
000036  f7fffffe          BL       Flash_Spi_TxRx
                  |L30.58|
00003a  f5b67f00          CMP      r6,#0x200             ;103
00003e  dbf6              BLT      |L30.46|
;;;105    	}
;;;106    	CS_HIGH();
000040  2110              MOVS     r1,#0x10
000042  4803              LDR      r0,|L30.80|
000044  f7fffffe          BL       GPIO_SetBits
;;;107    	Flash_wait_busy();
000048  f7fffffe          BL       Flash_wait_busy
;;;108    	return 1;
00004c  2001              MOVS     r0,#1
;;;109    }
00004e  bd70              POP      {r4-r6,pc}
;;;110    
                          ENDP

                  |L30.80|
                          DCD      0x40021000

                          AREA ||i.Flash_write_buffer_flash||, CODE, READONLY, ALIGN=2

                  Flash_write_buffer_flash PROC
;;;138    }
;;;139    u8 Flash_write_buffer_flash(u32 add)
000000  b510              PUSH     {r4,lr}
;;;140    {
000002  4604              MOV      r4,r0
;;;141    	CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  480c              LDR      r0,|L31.56|
000008  f7fffffe          BL       GPIO_ResetBits
;;;142    	Flash_Spi_TxRx(FLASH_OP_BF_WRITE_FLASH);
00000c  2083              MOVS     r0,#0x83
00000e  f7fffffe          BL       Flash_Spi_TxRx
;;;143    	Flash_Spi_TxRx((add >> 16)&0xff);
000012  f3c44007          UBFX     r0,r4,#16,#8
000016  f7fffffe          BL       Flash_Spi_TxRx
;;;144    	Flash_Spi_TxRx((add >> 8)&0xff);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       Flash_Spi_TxRx
;;;145    	Flash_Spi_TxRx((add >> 0)&0xff);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       Flash_Spi_TxRx
;;;146    	CS_HIGH();
000028  2110              MOVS     r1,#0x10
00002a  4803              LDR      r0,|L31.56|
00002c  f7fffffe          BL       GPIO_SetBits
;;;147    	Flash_wait_busy();
000030  f7fffffe          BL       Flash_wait_busy
;;;148    	return 1;
000034  2001              MOVS     r0,#1
;;;149    }
000036  bd10              POP      {r4,pc}
;;;150    u8 Flash_read_arr(u32 add, u8* b,u32 n)
                          ENDP

                  |L31.56|
                          DCD      0x40021000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fbuf
                          %        528
                  file_sys
                          %        80

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ||ftb||
                          DCD      0x00100000
                          DCD      0x00140000
                          DCD      0x00180000
                          DCD      0x001c0000

                          AREA ||.data||, DATA, ALIGN=2

                  FlashFileBytesWritten
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\flash.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_flash_c_eae9c919____REV16|
#line 114 "..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_flash_c_eae9c919____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_flash_c_eae9c919____REVSH|
#line 128
|__asm___7_flash_c_eae9c919____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
